line: 1 col: 1 match: --(* Illegal octal numbers 019 *)--
action [94] { return TokenType.tok_comment; }
tok_comment
line: 1 col: 32 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 2 col: 1 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 3 col: 1 match: --MODULE--
action [56] { return TokenType.tok_module; }
tok_module
line: 3 col: 7 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 3 col: 8 match: --Fib--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 3 col: 11 match: --;--
action [64] { return TokenType.tok_semicolon; }
tok_semicolon
line: 3 col: 12 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 4 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 4 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 4 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 4 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 4 col: 5 match: --VAR--
action [45] { return TokenType.tok_var; }
tok_var
line: 4 col: 8 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 4 col: 9 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 5 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 6 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 7 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 8 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 9 match: --n--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 5 col: 10 match: --:--
action [63] { return TokenType.tok_colon; }
tok_colon
line: 5 col: 11 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 12 match: --INTEGER--
action [37] { return TokenType.tok_integer; }
tok_integer
line: 5 col: 19 match: --;--
action [64] { return TokenType.tok_semicolon; }
tok_semicolon
line: 5 col: 20 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 6 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 6 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 6 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 6 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 6 col: 5 match: --PROCEDURE--
action [46] { return TokenType.tok_procedure; }
tok_procedure
line: 6 col: 14 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 6 col: 15 match: --Fib--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 6 col: 18 match: --(--
action [65] { return TokenType.tok_lparen; }
tok_lparen
line: 6 col: 19 match: --n--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 6 col: 20 match: --:--
action [63] { return TokenType.tok_colon; }
tok_colon
line: 6 col: 21 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 6 col: 22 match: --INTEGER--
action [37] { return TokenType.tok_integer; }
tok_integer
line: 6 col: 29 match: --,--
action [61] { return TokenType.tok_comma; }
tok_comma
line: 6 col: 30 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 6 col: 31 match: --var--
action [45] { return TokenType.tok_var; }
tok_var
line: 6 col: 34 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 6 col: 35 match: --result--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 6 col: 41 match: --:--
action [63] { return TokenType.tok_colon; }
tok_colon
line: 6 col: 42 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 6 col: 43 match: --INTEGER--
action [37] { return TokenType.tok_integer; }
tok_integer
line: 6 col: 50 match: --)--
action [66] { return TokenType.tok_rparen; }
tok_rparen
line: 6 col: 51 match: --;--
action [64] { return TokenType.tok_semicolon; }
tok_semicolon
line: 6 col: 52 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 7 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 7 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 7 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 7 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 7 col: 5 match: --VAR--
action [45] { return TokenType.tok_var; }
tok_var
line: 7 col: 8 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 7 col: 9 match: --i--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 7 col: 10 match: --,--
action [61] { return TokenType.tok_comma; }
tok_comma
line: 7 col: 11 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 7 col: 12 match: --j--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 7 col: 13 match: --:--
action [63] { return TokenType.tok_colon; }
tok_colon
line: 7 col: 14 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 7 col: 15 match: --INTEGER--
action [37] { return TokenType.tok_integer; }
tok_integer
line: 7 col: 22 match: --;--
action [64] { return TokenType.tok_semicolon; }
tok_semicolon
line: 7 col: 23 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 8 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 8 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 8 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 8 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 8 col: 5 match: --BEGIN--
action [47] { return TokenType.tok_begin; }
tok_begin
line: 8 col: 10 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 9 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 9 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 9 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 9 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 9 col: 5 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 9 col: 6 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 9 col: 7 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 9 col: 8 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 9 col: 9 match: --IF--
action [49] { return TokenType.tok_if; }
tok_if
line: 9 col: 11 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 9 col: 12 match: --n--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 9 col: 13 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 9 col: 14 match: --=--
action [70] { return TokenType.tok_equal; }
tok_equal
line: 9 col: 15 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 9 col: 16 match: --0--
action [85] { if (yylength() > 12)
            throw new IllegalIntegerRangeException();
            return TokenType.tok_octal; }
tok_octal
line: 9 col: 17 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 9 col: 18 match: --THEN--
action [50] { return TokenType.tok_then; }
tok_then
line: 9 col: 22 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 10 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 10 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 10 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 10 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 10 col: 5 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 10 col: 6 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 10 col: 7 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 10 col: 8 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 10 col: 9 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 10 col: 10 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 10 col: 11 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 10 col: 12 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 10 col: 13 match: --result--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 10 col: 19 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 10 col: 20 match: --:=--
action [59] { return TokenType.tok_assign; }
tok_assign
line: 10 col: 22 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 10 col: 23 match: --0--
action [85] { if (yylength() > 12)
            throw new IllegalIntegerRangeException();
            return TokenType.tok_octal; }
tok_octal
line: 10 col: 24 match: --;--
action [64] { return TokenType.tok_semicolon; }
tok_semicolon
line: 10 col: 25 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 11 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 11 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 11 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 11 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 11 col: 5 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 11 col: 6 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 11 col: 7 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 11 col: 8 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 11 col: 9 match: --ELSIF--
action [54] { return TokenType.tok_elsif; }
tok_elsif
line: 11 col: 14 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 11 col: 15 match: --n--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 11 col: 16 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 11 col: 17 match: --=--
action [70] { return TokenType.tok_equal; }
tok_equal
line: 11 col: 18 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 11 col: 19 match: --1--
action [88] { if (yylength() > 12)
            throw new IllegalIntegerRangeException();
            return TokenType.tok_decimal; }
tok_decimal
line: 11 col: 20 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 11 col: 21 match: --THEN--
action [50] { return TokenType.tok_then; }
tok_then
line: 11 col: 25 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 12 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 12 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 12 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 12 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 12 col: 5 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 12 col: 6 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 12 col: 7 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 12 col: 8 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 12 col: 9 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 12 col: 10 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 12 col: 11 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 12 col: 12 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 12 col: 13 match: --result--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 12 col: 19 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 12 col: 20 match: --:=--
action [59] { return TokenType.tok_assign; }
tok_assign
line: 12 col: 22 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 12 col: 23 match: --n--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 12 col: 24 match: --;--
action [64] { return TokenType.tok_semicolon; }
tok_semicolon
line: 12 col: 25 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 13 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 13 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 13 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 13 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 13 col: 5 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 13 col: 6 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 13 col: 7 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 13 col: 8 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 13 col: 9 match: --ELSE--
action [51] { return TokenType.tok_else; }
tok_else
line: 13 col: 13 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 14 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 14 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 14 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 14 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 14 col: 5 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 14 col: 6 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 14 col: 7 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 14 col: 8 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 14 col: 9 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 14 col: 10 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 14 col: 11 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 14 col: 12 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 14 col: 13 match: --Fib--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 14 col: 16 match: --(--
action [65] { return TokenType.tok_lparen; }
tok_lparen
line: 14 col: 17 match: --n--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 14 col: 18 match: -----
action [77] { return TokenType.tok_minus; }
tok_minus
line: 14 col: 19 match: --1--
action [88] { if (yylength() > 12)
            throw new IllegalIntegerRangeException();
            return TokenType.tok_decimal; }
tok_decimal
line: 14 col: 20 match: --,--
action [61] { return TokenType.tok_comma; }
tok_comma
line: 14 col: 21 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 14 col: 22 match: --i--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 14 col: 23 match: --)--
action [66] { return TokenType.tok_rparen; }
tok_rparen
line: 14 col: 24 match: --;--
action [64] { return TokenType.tok_semicolon; }
tok_semicolon
line: 14 col: 25 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 15 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 15 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 15 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 15 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 15 col: 5 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 15 col: 6 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 15 col: 7 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 15 col: 8 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 15 col: 9 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 15 col: 10 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 15 col: 11 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 15 col: 12 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 15 col: 13 match: --Fib--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 15 col: 16 match: --(--
action [65] { return TokenType.tok_lparen; }
tok_lparen
line: 15 col: 17 match: --n--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 15 col: 18 match: -----
action [77] { return TokenType.tok_minus; }
tok_minus
line: 15 col: 19 match: --2--
action [88] { if (yylength() > 12)
            throw new IllegalIntegerRangeException();
            return TokenType.tok_decimal; }
tok_decimal
line: 15 col: 20 match: --,--
action [61] { return TokenType.tok_comma; }
tok_comma
line: 15 col: 21 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 15 col: 22 match: --j--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 15 col: 23 match: --)--
action [66] { return TokenType.tok_rparen; }
tok_rparen
line: 15 col: 24 match: --;--
action [64] { return TokenType.tok_semicolon; }
tok_semicolon
line: 15 col: 25 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 16 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 16 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 16 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 16 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 16 col: 5 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 16 col: 6 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 16 col: 7 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 16 col: 8 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 16 col: 9 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 16 col: 10 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 16 col: 11 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 16 col: 12 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 16 col: 13 match: --result--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 16 col: 19 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 16 col: 20 match: --:=--
action [59] { return TokenType.tok_assign; }
tok_assign
line: 16 col: 22 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 16 col: 23 match: --i--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 16 col: 24 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 16 col: 25 match: --+--
action [76] { return TokenType.tok_plus; }
tok_plus
line: 16 col: 26 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 16 col: 27 match: --j--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 16 col: 28 match: --;--
action [64] { return TokenType.tok_semicolon; }
tok_semicolon
line: 16 col: 29 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 17 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 17 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 17 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 17 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 17 col: 5 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 17 col: 6 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 17 col: 7 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 17 col: 8 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 17 col: 9 match: --END--
action [48] { return TokenType.tok_end; }
tok_end
line: 17 col: 12 match: --;--
action [64] { return TokenType.tok_semicolon; }
tok_semicolon
line: 17 col: 13 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 18 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 18 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 18 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 18 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 18 col: 5 match: --END--
action [48] { return TokenType.tok_end; }
tok_end
line: 18 col: 8 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 18 col: 9 match: --Fib--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 18 col: 12 match: --;--
action [64] { return TokenType.tok_semicolon; }
tok_semicolon
line: 18 col: 13 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 19 col: 1 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 20 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 20 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 20 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 20 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 20 col: 5 match: --PROCEDURE--
action [46] { return TokenType.tok_procedure; }
tok_procedure
line: 20 col: 14 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 20 col: 15 match: --Fib2--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 20 col: 19 match: --(--
action [65] { return TokenType.tok_lparen; }
tok_lparen
line: 20 col: 20 match: --VAR--
action [45] { return TokenType.tok_var; }
tok_var
line: 20 col: 23 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 20 col: 24 match: --n--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 20 col: 25 match: --:--
action [63] { return TokenType.tok_colon; }
tok_colon
line: 20 col: 26 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 20 col: 27 match: --INTEGER--
action [37] { return TokenType.tok_integer; }
tok_integer
line: 20 col: 34 match: --)--
action [66] { return TokenType.tok_rparen; }
tok_rparen
line: 20 col: 35 match: --;--
action [64] { return TokenType.tok_semicolon; }
tok_semicolon
line: 20 col: 36 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 21 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 21 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 21 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 21 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 21 col: 5 match: --CONST--
action [55] { return TokenType.tok_const; }
tok_const
line: 21 col: 10 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 21 col: 11 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 22 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 22 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 22 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 22 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 22 col: 5 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 22 col: 6 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 22 col: 7 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 22 col: 8 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 22 col: 9 match: --c--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 22 col: 10 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 22 col: 11 match: --=--
action [70] { return TokenType.tok_equal; }
tok_equal
line: 22 col: 12 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 22 col: 13 match: --019--
action [92] { throw new IllegalOctalException(); }
Unexpected exception:

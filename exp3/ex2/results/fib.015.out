line: 1 col: 1 match: --(* Illegal Identifier Length *)--
action [94] { return TokenType.tok_comment; }
tok_comment
line: 1 col: 32 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 2 col: 1 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 3 col: 1 match: --MODULE--
action [56] { return TokenType.tok_module; }
tok_module
line: 3 col: 7 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 3 col: 8 match: --Fib--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 3 col: 11 match: --;--
action [64] { return TokenType.tok_semicolon; }
tok_semicolon
line: 3 col: 12 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 4 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 4 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 4 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 4 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 4 col: 5 match: --VAR--
action [45] { return TokenType.tok_var; }
tok_var
line: 4 col: 8 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 4 col: 9 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 5 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 6 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 7 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 8 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 9 match: --n--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
tok_identifier
line: 5 col: 10 match: --:--
action [63] { return TokenType.tok_colon; }
tok_colon
line: 5 col: 11 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 5 col: 12 match: --INTEGER--
action [37] { return TokenType.tok_integer; }
tok_integer
line: 5 col: 19 match: --;--
action [64] { return TokenType.tok_semicolon; }
tok_semicolon
line: 5 col: 20 match: --\u000A--
action [95] { return TokenType.tok_space; }
tok_space
line: 6 col: 1 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 6 col: 2 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 6 col: 3 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 6 col: 4 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 6 col: 5 match: --PROCEDURE--
action [46] { return TokenType.tok_procedure; }
tok_procedure
line: 6 col: 14 match: -- --
action [95] { return TokenType.tok_space; }
tok_space
line: 6 col: 15 match: --Fib11111111111111111111111111111111111111--
action [99] { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier; }
Unexpected exception:

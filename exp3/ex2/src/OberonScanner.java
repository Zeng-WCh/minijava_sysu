// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/oberon.flex

import exceptions.*;



@SuppressWarnings("fallthrough")
public class OberonScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\2\0\1\5\2\0\1\6\1\0\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\0\1\16\7\17\2\20"+
    "\1\21\1\22\1\23\1\24\1\25\2\0\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\2\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\37\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\37\1\53\1\37\1\54"+
    "\1\0\1\55\3\0\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\2\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\37\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\37\1\53\1\37\1\0\1\56\1\0\1\57"+
    "\6\0\1\3\252\0\2\60\115\0\1\61\u01a8\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\1\2\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\16\23\1\24\1\25"+
    "\1\26\1\1\3\0\2\27\1\30\1\31\1\30\1\32"+
    "\1\33\1\34\5\23\1\35\1\0\2\23\1\36\2\23"+
    "\1\37\1\40\7\23\1\36\2\0\2\30\4\23\2\41"+
    "\1\23\1\0\1\42\1\23\1\43\5\23\1\44\1\23"+
    "\1\0\1\23\2\0\1\45\1\27\2\23\1\0\2\23"+
    "\1\0\1\46\1\23\1\0\1\46\3\23\1\47\1\23"+
    "\1\50\1\51\1\23\1\0\1\23\2\0\1\45\1\52"+
    "\2\53\1\23\2\54\2\55\4\23\2\56\2\57\1\0"+
    "\1\27\1\0\2\23\1\60\1\23\1\61\1\23\2\0"+
    "\1\27\1\62\1\63\2\23\1\0\1\63\2\23\1\0"+
    "\1\64\2\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\62\0\62\0\144\0\62\0\62\0\226"+
    "\0\62\0\310\0\62\0\62\0\62\0\62\0\372\0\u012c"+
    "\0\u015e\0\62\0\u0190\0\62\0\u01c2\0\u01f4\0\u0226\0\u0258"+
    "\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\u047e\0\62\0\62\0\62\0\u04b0\0\u04e2"+
    "\0\310\0\u0514\0\u0546\0\62\0\u0578\0\u05aa\0\u05dc\0\62"+
    "\0\62\0\62\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u02ee"+
    "\0\u0708\0\u073a\0\u076c\0\u02ee\0\u079e\0\u07d0\0\u02ee\0\u02ee"+
    "\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\62"+
    "\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe"+
    "\0\u02ee\0\62\0\u0af0\0\u0b22\0\u02ee\0\u0b54\0\u0b86\0\u0bb8"+
    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u02ee\0\u0cb2\0\u0ce4\0\u0d16"+
    "\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6"+
    "\0\u0ed8\0\u0f0a\0\u02ee\0\u0f3c\0\u0f6e\0\62\0\u0fa0\0\u0fd2"+
    "\0\u1004\0\u02ee\0\u1036\0\u02ee\0\u02ee\0\u1068\0\u109a\0\u10cc"+
    "\0\u10fe\0\u1130\0\u1162\0\u02ee\0\u02ee\0\62\0\u1194\0\u02ee"+
    "\0\62\0\u02ee\0\62\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u02ee"+
    "\0\62\0\u128e\0\u12c0\0\u12f2\0\u1162\0\u1324\0\u1356\0\u1388"+
    "\0\u02ee\0\u13ba\0\u02ee\0\u13ec\0\u141e\0\u1450\0\u1482\0\u02ee"+
    "\0\u02ee\0\u14b4\0\u14e6\0\u1518\0\62\0\u154a\0\u157c\0\u15ae"+
    "\0\u02ee\0\u02ee\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\2\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\3\33\1\34\2\33\1\35\1\33\1\36\1\37"+
    "\1\40\1\33\1\41\1\33\1\42\1\43\1\33\1\44"+
    "\1\45\1\2\1\46\1\47\1\2\7\4\1\50\1\4"+
    "\1\51\52\4\1\3\4\4\1\50\1\4\1\51\57\4"+
    "\1\52\1\4\1\53\57\4\1\50\1\54\1\51\57\4"+
    "\1\50\1\4\1\51\4\4\2\17\1\55\5\4\26\56"+
    "\2\4\1\57\12\4\1\50\1\4\1\51\4\4\3\20"+
    "\5\4\26\56\15\4\1\50\1\4\1\51\12\4\1\60"+
    "\44\4\1\50\1\4\1\51\12\4\1\61\44\4\1\50"+
    "\1\4\1\51\12\4\1\62\44\4\1\50\1\4\1\51"+
    "\4\4\3\33\5\4\17\33\1\63\6\33\2\4\1\33"+
    "\12\4\1\50\1\4\1\51\4\4\3\33\5\4\4\33"+
    "\1\64\10\33\1\65\10\33\2\4\1\33\12\4\1\50"+
    "\1\4\1\51\4\4\3\33\5\4\15\33\1\66\10\33"+
    "\2\4\1\33\12\4\1\50\1\4\1\51\4\4\3\33"+
    "\5\4\10\33\1\67\4\33\1\70\10\33\2\4\1\33"+
    "\1\4\1\71\10\4\1\50\1\4\1\51\4\4\3\33"+
    "\5\4\12\33\1\72\1\33\1\73\11\33\2\4\1\33"+
    "\12\4\1\50\1\4\1\51\4\4\3\33\5\4\26\33"+
    "\2\4\1\33\12\4\1\50\1\4\1\51\4\4\3\33"+
    "\5\4\5\33\1\74\6\33\1\75\11\33\2\4\1\33"+
    "\12\4\1\50\1\4\1\51\4\4\3\33\5\4\15\33"+
    "\1\76\10\33\2\4\1\33\12\4\1\50\1\4\1\51"+
    "\4\4\3\33\5\4\5\33\1\77\11\33\1\100\6\33"+
    "\2\4\1\33\12\4\1\50\1\4\1\51\4\4\3\33"+
    "\5\4\17\33\1\101\6\33\2\4\1\33\12\4\1\50"+
    "\1\4\1\51\4\4\3\33\5\4\4\33\1\102\21\33"+
    "\2\4\1\33\12\4\1\50\1\4\1\51\4\4\3\33"+
    "\5\4\7\33\1\103\15\33\1\104\2\4\1\33\12\4"+
    "\1\50\1\4\1\51\4\4\3\33\5\4\1\105\25\33"+
    "\2\4\1\33\12\4\1\50\1\4\1\51\4\4\3\33"+
    "\5\4\7\33\1\106\7\33\1\107\6\33\2\4\1\33"+
    "\12\4\1\50\1\4\1\51\21\4\1\110\6\4\1\111"+
    "\26\4\1\52\1\4\1\0\57\4\1\52\1\4\1\51"+
    "\50\4\11\53\1\112\50\53\7\4\1\50\1\4\1\51"+
    "\4\4\2\113\1\55\5\4\26\56\2\4\1\57\12\4"+
    "\1\50\1\4\1\51\4\4\3\56\5\4\26\56\2\4"+
    "\1\56\12\4\1\50\1\4\1\51\4\4\2\114\1\57"+
    "\35\4\1\57\12\4\1\50\1\4\1\51\4\4\3\33"+
    "\5\4\17\33\1\115\6\33\2\4\1\33\12\4\1\50"+
    "\1\4\1\51\4\4\3\33\5\4\6\33\1\116\17\33"+
    "\2\4\1\33\12\4\1\50\1\4\1\51\4\4\3\33"+
    "\5\4\15\33\1\117\10\33\2\4\1\33\12\4\1\50"+
    "\1\4\1\51\4\4\3\33\5\4\14\33\1\120\11\33"+
    "\2\4\1\33\12\4\1\50\1\4\1\51\4\4\3\33"+
    "\5\4\23\33\1\121\2\33\2\4\1\33\12\4\1\50"+
    "\1\4\1\51\37\4\1\122\17\4\1\50\1\4\1\51"+
    "\4\4\3\33\5\4\20\33\1\123\5\33\2\4\1\33"+
    "\2\4\1\124\7\4\1\50\1\4\1\51\4\4\3\33"+
    "\5\4\3\33\1\125\22\33\2\4\1\33\12\4\1\50"+
    "\1\4\1\51\4\4\3\33\5\4\21\33\1\126\4\33"+
    "\2\4\1\33\12\4\1\50\1\4\1\51\4\4\3\33"+
    "\5\4\3\33\1\127\22\33\2\4\1\33\12\4\1\50"+
    "\1\4\1\51\4\4\3\33\5\4\15\33\1\130\10\33"+
    "\2\4\1\33\12\4\1\50\1\4\1\51\4\4\3\33"+
    "\5\4\1\131\1\33\1\132\23\33\2\4\1\33\12\4"+
    "\1\50\1\4\1\51\4\4\3\33\5\4\4\33\1\133"+
    "\21\33\2\4\1\33\12\4\1\50\1\4\1\51\4\4"+
    "\3\33\5\4\16\33\1\134\7\33\2\4\1\33\12\4"+
    "\1\50\1\4\1\51\4\4\3\33\5\4\17\33\1\135"+
    "\6\33\2\4\1\33\12\4\1\50\1\4\1\51\4\4"+
    "\3\33\5\4\10\33\1\136\15\33\2\4\1\33\1\4"+
    "\1\137\10\4\1\50\1\4\1\51\4\4\3\33\5\4"+
    "\10\33\1\140\15\33\2\4\1\33\1\4\1\141\10\4"+
    "\1\50\1\4\1\51\35\4\1\142\12\4\10\53\1\143"+
    "\1\144\50\53\7\4\1\50\1\4\1\51\4\4\3\113"+
    "\5\4\26\56\15\4\1\50\1\4\1\51\4\4\3\114"+
    "\50\4\1\50\1\4\1\51\4\4\3\33\5\4\1\145"+
    "\25\33\2\4\1\33\12\4\1\50\1\4\1\51\4\4"+
    "\3\33\5\4\10\33\1\146\15\33\2\4\1\33\1\4"+
    "\1\147\10\4\1\50\1\4\1\51\4\4\3\33\5\4"+
    "\12\33\1\150\13\33\2\4\1\33\12\4\1\50\1\4"+
    "\1\51\4\4\3\33\5\4\20\33\1\151\5\33\2\4"+
    "\1\33\2\4\1\152\7\4\1\50\1\4\1\51\4\4"+
    "\3\33\5\4\4\33\1\153\3\33\1\154\15\33\2\4"+
    "\1\33\1\4\1\155\10\4\1\50\1\4\1\51\20\4"+
    "\1\156\3\4\1\155\21\4\1\155\10\4\1\50\1\4"+
    "\1\51\4\4\3\33\5\4\4\33\1\157\21\33\2\4"+
    "\1\33\12\4\1\50\1\4\1\51\4\4\3\33\5\4"+
    "\22\33\1\160\3\33\2\4\1\33\12\4\1\50\1\4"+
    "\1\51\4\4\3\33\5\4\2\33\1\161\23\33\2\4"+
    "\1\33\12\4\1\50\1\4\1\51\4\4\3\33\5\4"+
    "\3\33\1\162\22\33\2\4\1\33\12\4\1\50\1\4"+
    "\1\51\4\4\3\33\5\4\15\33\1\163\10\33\2\4"+
    "\1\33\12\4\1\50\1\4\1\51\4\4\3\33\5\4"+
    "\14\33\1\164\11\33\2\4\1\33\12\4\1\50\1\4"+
    "\1\51\4\4\3\33\5\4\4\33\1\165\21\33\2\4"+
    "\1\33\12\4\1\50\1\4\1\51\4\4\3\33\5\4"+
    "\12\33\1\166\13\33\2\4\1\33\12\4\1\50\1\4"+
    "\1\51\26\4\1\167\30\4\1\50\1\4\1\51\4\4"+
    "\3\33\5\4\21\33\1\170\4\33\2\4\1\33\12\4"+
    "\1\50\1\4\1\51\35\4\1\171\21\4\1\50\1\4"+
    "\1\51\20\4\1\172\27\4\62\0\10\53\1\173\1\144"+
    "\50\53\7\4\1\50\1\4\1\51\4\4\3\33\5\4"+
    "\25\33\1\174\2\4\1\33\12\4\1\50\1\4\1\51"+
    "\4\4\3\33\5\4\14\33\1\175\11\33\2\4\1\33"+
    "\12\4\1\50\1\4\1\51\30\4\1\176\26\4\1\50"+
    "\1\4\1\51\4\4\3\33\5\4\4\33\1\177\21\33"+
    "\2\4\1\33\12\4\1\50\1\4\1\51\4\4\3\33"+
    "\5\4\21\33\1\200\4\33\2\4\1\33\12\4\1\50"+
    "\1\4\1\51\35\4\1\201\21\4\1\50\1\4\1\51"+
    "\4\4\3\33\5\4\5\33\1\202\20\33\2\4\1\33"+
    "\12\4\1\50\1\4\1\51\21\4\1\203\35\4\1\50"+
    "\1\4\1\51\4\4\3\33\5\4\6\33\1\204\17\33"+
    "\2\4\1\33\12\4\1\50\1\4\1\51\4\4\3\33"+
    "\5\4\12\33\1\205\13\33\2\4\1\33\12\4\1\50"+
    "\1\4\1\51\4\4\3\33\5\4\4\33\1\206\21\33"+
    "\2\4\1\33\12\4\1\50\1\4\1\51\4\4\3\33"+
    "\5\4\17\33\1\207\6\33\2\4\1\33\12\4\1\50"+
    "\1\4\1\51\4\4\3\33\5\4\4\33\1\210\21\33"+
    "\2\4\1\33\12\4\1\50\1\4\1\51\20\4\1\211"+
    "\36\4\1\50\1\4\1\51\4\4\3\33\5\4\4\33"+
    "\1\212\21\33\2\4\1\33\12\4\1\50\1\4\1\51"+
    "\20\4\1\213\36\4\1\50\1\4\1\51\22\4\1\214"+
    "\25\4\11\215\1\216\50\215\7\4\1\50\1\4\1\51"+
    "\4\4\3\33\5\4\1\217\25\33\2\4\1\33\12\4"+
    "\1\50\1\4\1\51\4\4\3\33\5\4\4\33\1\220"+
    "\21\33\2\4\1\33\12\4\1\50\1\4\1\51\4\4"+
    "\3\33\5\4\4\33\1\221\21\33\2\4\1\33\12\4"+
    "\1\50\1\4\1\51\4\4\3\33\5\4\3\33\1\222"+
    "\22\33\2\4\1\33\12\4\1\50\1\4\1\51\4\4"+
    "\3\33\5\4\3\33\1\223\22\33\2\4\1\33\12\4"+
    "\1\50\1\4\1\51\4\4\3\33\5\4\12\33\1\224"+
    "\13\33\2\4\1\33\12\4\1\50\1\4\1\51\26\4"+
    "\1\225\30\4\1\50\1\4\1\51\20\4\1\226\27\4"+
    "\10\215\1\0\1\227\50\215\7\4\1\50\1\4\1\51"+
    "\4\4\3\33\5\4\14\33\1\230\11\33\2\4\1\33"+
    "\12\4\1\50\1\4\1\51\4\4\3\33\5\4\17\33"+
    "\1\231\6\33\2\4\1\33\12\4\1\50\1\4\1\51"+
    "\4\4\3\33\5\4\22\33\1\232\3\33\2\4\1\33"+
    "\12\4\1\50\1\4\1\51\4\4\3\33\5\4\10\33"+
    "\1\233\15\33\2\4\1\33\1\4\1\234\10\4\1\50"+
    "\1\4\1\51\24\4\1\234\21\4\1\234\10\4\1\50"+
    "\1\4\1\51\33\4\1\235\14\4\11\215\1\227\50\215"+
    "\7\4\1\50\1\4\1\51\4\4\3\33\5\4\17\33"+
    "\1\236\6\33\2\4\1\33\12\4\1\50\1\4\1\51"+
    "\4\4\3\33\5\4\14\33\1\237\11\33\2\4\1\33"+
    "\12\4\1\50\1\4\1\51\30\4\1\240\26\4\1\50"+
    "\1\4\1\51\4\4\3\33\5\4\4\33\1\241\21\33"+
    "\2\4\1\33\12\4\1\50\1\4\1\51\4\4\3\33"+
    "\5\4\4\33\1\242\21\33\2\4\1\33\12\4\1\50"+
    "\1\4\1\51\20\4\1\243\27\4";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5600];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\0\43\1\3\0\16\1\1\0\17\1"+
    "\2\0\11\1\1\0\12\1\1\0\1\1\2\0\1\11"+
    "\3\1\1\0\2\1\1\0\2\1\1\0\11\1\1\0"+
    "\1\1\2\0\21\1\1\0\1\1\1\0\6\1\2\0"+
    "\5\1\1\0\3\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OberonScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TokenType yylex() throws java.io.IOException
    , LexicalException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { return TokenType.tok_eof;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [103] { throw new IllegalSymbolException(); }");
            { throw new IllegalSymbolException();
            }
          // fall through
          case 54: break;
          case 2:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [95] { return TokenType.tok_space; }");
            { return TokenType.tok_space;
            }
          // fall through
          case 55: break;
          case 3:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [71] { return TokenType.tok_not_equal; }");
            { return TokenType.tok_not_equal;
            }
          // fall through
          case 56: break;
          case 4:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [81] { return TokenType.tok_and; }");
            { return TokenType.tok_and;
            }
          // fall through
          case 57: break;
          case 5:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [65] { return TokenType.tok_lparen; }");
            { return TokenType.tok_lparen;
            }
          // fall through
          case 58: break;
          case 6:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [66] { return TokenType.tok_rparen; }");
            { return TokenType.tok_rparen;
            }
          // fall through
          case 59: break;
          case 7:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [78] { return TokenType.tok_multiply; }");
            { return TokenType.tok_multiply;
            }
          // fall through
          case 60: break;
          case 8:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [76] { return TokenType.tok_plus; }");
            { return TokenType.tok_plus;
            }
          // fall through
          case 61: break;
          case 9:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [61] { return TokenType.tok_comma; }");
            { return TokenType.tok_comma;
            }
          // fall through
          case 62: break;
          case 10:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [77] { return TokenType.tok_minus; }");
            { return TokenType.tok_minus;
            }
          // fall through
          case 63: break;
          case 11:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [62] { return TokenType.tok_dot; }");
            { return TokenType.tok_dot;
            }
          // fall through
          case 64: break;
          case 12:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [85] { if (yylength() > 12)"+ZZ_NL+"            throw new IllegalIntegerRangeException();"+ZZ_NL+"            return TokenType.tok_octal; }");
            { if (yylength() > 12)
            throw new IllegalIntegerRangeException();
            return TokenType.tok_octal;
            }
          // fall through
          case 65: break;
          case 13:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [88] { if (yylength() > 12)"+ZZ_NL+"            throw new IllegalIntegerRangeException();"+ZZ_NL+"            return TokenType.tok_decimal; }");
            { if (yylength() > 12)
            throw new IllegalIntegerRangeException();
            return TokenType.tok_decimal;
            }
          // fall through
          case 66: break;
          case 14:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [63] { return TokenType.tok_colon; }");
            { return TokenType.tok_colon;
            }
          // fall through
          case 67: break;
          case 15:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [64] { return TokenType.tok_semicolon; }");
            { return TokenType.tok_semicolon;
            }
          // fall through
          case 68: break;
          case 16:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [72] { return TokenType.tok_less; }");
            { return TokenType.tok_less;
            }
          // fall through
          case 69: break;
          case 17:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [70] { return TokenType.tok_equal; }");
            { return TokenType.tok_equal;
            }
          // fall through
          case 70: break;
          case 18:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [74] { return TokenType.tok_greater; }");
            { return TokenType.tok_greater;
            }
          // fall through
          case 71: break;
          case 19:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [99] { if (yylength() > 24)"+ZZ_NL+"                throw new IllegalIdentifierLengthException();"+ZZ_NL+"                return TokenType.tok_identifier; }");
            { if (yylength() > 24)
                throw new IllegalIdentifierLengthException();
                return TokenType.tok_identifier;
            }
          // fall through
          case 72: break;
          case 20:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [67] { return TokenType.tok_lbracket; }");
            { return TokenType.tok_lbracket;
            }
          // fall through
          case 73: break;
          case 21:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [68] { return TokenType.tok_rbracket; }");
            { return TokenType.tok_rbracket;
            }
          // fall through
          case 74: break;
          case 22:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [83] { return TokenType.tok_not; }");
            { return TokenType.tok_not;
            }
          // fall through
          case 75: break;
          case 23:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { throw new MismatchedCommentException(); }");
            { throw new MismatchedCommentException();
            }
          // fall through
          case 76: break;
          case 24:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [92] { throw new IllegalOctalException(); }");
            { throw new IllegalOctalException();
            }
          // fall through
          case 77: break;
          case 25:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [91] { throw new IllegalIntegerException(); }");
            { throw new IllegalIntegerException();
            }
          // fall through
          case 78: break;
          case 26:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [59] { return TokenType.tok_assign; }");
            { return TokenType.tok_assign;
            }
          // fall through
          case 79: break;
          case 27:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [73] { return TokenType.tok_less_equal; }");
            { return TokenType.tok_less_equal;
            }
          // fall through
          case 80: break;
          case 28:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [75] { return TokenType.tok_greater_equal; }");
            { return TokenType.tok_greater_equal;
            }
          // fall through
          case 81: break;
          case 29:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [53] { return TokenType.tok_do; }");
            { return TokenType.tok_do;
            }
          // fall through
          case 82: break;
          case 30:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [49] { return TokenType.tok_if; }");
            { return TokenType.tok_if;
            }
          // fall through
          case 83: break;
          case 31:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [43] { return TokenType.tok_of; }");
            { return TokenType.tok_of;
            }
          // fall through
          case 84: break;
          case 32:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [82] { return TokenType.tok_or; }");
            { return TokenType.tok_or;
            }
          // fall through
          case 85: break;
          case 33:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [79] { return TokenType.tok_divide; }");
            { return TokenType.tok_divide;
            }
          // fall through
          case 86: break;
          case 34:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [48] { return TokenType.tok_end; }");
            { return TokenType.tok_end;
            }
          // fall through
          case 87: break;
          case 35:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [80] { return TokenType.tok_mod; }");
            { return TokenType.tok_mod;
            }
          // fall through
          case 88: break;
          case 36:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [45] { return TokenType.tok_var; }");
            { return TokenType.tok_var;
            }
          // fall through
          case 89: break;
          case 37:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [94] { return TokenType.tok_comment; }");
            { return TokenType.tok_comment;
            }
          // fall through
          case 90: break;
          case 38:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [51] { return TokenType.tok_else; }");
            { return TokenType.tok_else;
            }
          // fall through
          case 91: break;
          case 39:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [39] { return TokenType.tok_read; }");
            { return TokenType.tok_read;
            }
          // fall through
          case 92: break;
          case 40:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [50] { return TokenType.tok_then; }");
            { return TokenType.tok_then;
            }
          // fall through
          case 93: break;
          case 41:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [57] { return TokenType.tok_type; }");
            { return TokenType.tok_type;
            }
          // fall through
          case 94: break;
          case 42:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [42] { return TokenType.tok_array; }");
            { return TokenType.tok_array;
            }
          // fall through
          case 95: break;
          case 43:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [47] { return TokenType.tok_begin; }");
            { return TokenType.tok_begin;
            }
          // fall through
          case 96: break;
          case 44:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [55] { return TokenType.tok_const; }");
            { return TokenType.tok_const;
            }
          // fall through
          case 97: break;
          case 45:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [54] { return TokenType.tok_elsif; }");
            { return TokenType.tok_elsif;
            }
          // fall through
          case 98: break;
          case 46:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [52] { return TokenType.tok_while; }");
            { return TokenType.tok_while;
            }
          // fall through
          case 99: break;
          case 47:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [38] { return TokenType.tok_write; }");
            { return TokenType.tok_write;
            }
          // fall through
          case 100: break;
          case 48:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [56] { return TokenType.tok_module; }");
            { return TokenType.tok_module;
            }
          // fall through
          case 101: break;
          case 49:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [44] { return TokenType.tok_record; }");
            { return TokenType.tok_record;
            }
          // fall through
          case 102: break;
          case 50:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [36] { return TokenType.tok_boolean; }");
            { return TokenType.tok_boolean;
            }
          // fall through
          case 103: break;
          case 51:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [37] { return TokenType.tok_integer; }");
            { return TokenType.tok_integer;
            }
          // fall through
          case 104: break;
          case 52:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [46] { return TokenType.tok_procedure; }");
            { return TokenType.tok_procedure;
            }
          // fall through
          case 105: break;
          case 53:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [40] { return TokenType.tok_writeln; }");
            { return TokenType.tok_writeln;
            }
          // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java OberonScanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        OberonScanner scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new OberonScanner(reader);
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}

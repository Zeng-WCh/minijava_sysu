
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import exceptions.*;
import java.util.ArrayList;
import ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\012\000\002\034\004\000\002\034\002" +
    "\000\002\004\006\000\002\035\004\000\002\035\002\000" +
    "\002\041\007\000\002\041\006\000\002\041\002\000\002" +
    "\037\004\000\002\037\002\000\002\043\007\000\002\043" +
    "\006\000\002\043\002\000\002\036\004\000\002\036\002" +
    "\000\002\042\007\000\002\042\006\000\002\042\002\000" +
    "\002\040\005\000\002\040\002\000\002\005\005\000\002" +
    "\007\006\000\002\044\004\000\002\044\002\000\002\006" +
    "\005\000\002\045\003\000\002\045\002\000\002\010\006" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\046\005\000\002\046\002\000\002\011\006\000\002" +
    "\011\005\000\002\047\003\000\002\047\002\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\013\006\000\002\050\005\000" +
    "\002\050\002\000\002\015\005\000\002\015\004\000\002" +
    "\015\002\000\002\014\006\000\002\014\005\000\002\016" +
    "\004\000\002\051\005\000\002\051\002\000\002\017\004" +
    "\000\002\052\005\000\002\052\002\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\024\007\000\002\023\011\000\002\053\007\000\002\053" +
    "\002\000\002\054\004\000\002\054\002\000\002\022\004" +
    "\000\002\022\004\000\002\022\004\000\002\022\004\000" +
    "\002\055\003\000\002\025\004\000\002\025\006\000\002" +
    "\025\002\000\002\025\005\000\002\025\005\000\002\056" +
    "\005\000\002\056\002\000\002\021\006\000\002\026\004" +
    "\000\002\026\003\000\002\057\004\000\002\057\003\000" +
    "\002\057\003\000\002\057\002\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\027\005\000\002\061\003" +
    "\000\002\061\003\000\002\061\002\000\002\062\005\000" +
    "\002\062\003\000\002\062\003\000\002\062\002\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\030" +
    "\004\000\002\064\005\000\002\064\003\000\002\064\003" +
    "\000\002\064\002\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\031\004\000\002" +
    "\031\003\000\002\031\004\000\002\031\005\000\002\031" +
    "\005\000\002\033\005\000\002\033\006\000\002\033\002" +
    "\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\006\003\007\027\005\001\002\000\004\002" +
    "\322\001\002\000\004\060\010\001\002\000\004\002\000" +
    "\001\002\000\004\002\uffff\001\002\000\004\035\011\001" +
    "\002\000\016\014\ufff9\015\ufff9\016\ufff9\017\ufff9\026\013" +
    "\030\ufff9\001\002\000\014\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\030\203\001\002\000\016\014\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\030\ufff6\060\172\001\002\000\006\016\015\017" +
    "\ufffc\001\002\000\016\010\030\011\025\012\022\020\026" +
    "\023\023\060\032\001\002\000\004\017\017\001\002\000" +
    "\004\060\020\001\002\000\004\033\021\001\002\000\004" +
    "\002\ufffe\001\002\000\030\003\045\017\uffb4\022\uffb4\025" +
    "\uffb4\035\uffb4\036\050\050\041\051\036\057\uff9f\060\uff9f" +
    "\061\uff9f\001\002\000\020\003\045\036\uff9f\050\041\051" +
    "\036\057\uff9f\060\uff9f\061\uff9f\001\002\000\012\017\uffc5" +
    "\022\uffc5\025\uffc5\035\uffc5\001\002\000\030\003\045\017" +
    "\uffb4\022\uffb4\025\uffb4\035\uffb4\036\050\050\041\051\036" +
    "\057\uff9f\060\uff9f\061\uff9f\001\002\000\020\003\045\036" +
    "\uff9f\050\041\051\036\057\uff9f\060\uff9f\061\uff9f\001\002" +
    "\000\012\017\uffc6\022\uffc6\025\uffc6\035\142\001\002\000" +
    "\030\003\045\017\uffb4\022\uffb4\025\uffb4\035\uffb4\036\050" +
    "\050\041\051\036\057\uff9f\060\uff9f\061\uff9f\001\002\000" +
    "\012\017\uffc4\022\uffc4\025\uffc4\035\uffc4\001\002\000\036" +
    "\003\045\017\uffb4\022\uffb4\025\uffb4\031\uff87\033\042\035" +
    "\uffb4\036\050\040\047\050\041\051\036\057\uff9f\060\uff9f" +
    "\061\uff9f\001\002\000\012\017\uffc2\022\uffc2\025\uffc2\035" +
    "\uffc2\001\002\000\012\017\uffc3\022\uffc3\025\uffc3\035\uffc3" +
    "\001\002\000\004\017\ufffd\001\002\000\012\036\uffa0\057" +
    "\uffa0\060\uffa0\061\uffa0\001\002\000\012\036\112\057\105" +
    "\060\111\061\110\001\002\000\004\031\102\001\002\000" +
    "\012\036\uffa1\057\uffa1\060\uffa1\061\uffa1\001\002\000\004" +
    "\060\100\001\002\000\006\032\054\037\uffb0\001\002\000" +
    "\060\003\uffa9\013\uffa9\017\uffa9\021\uffa9\022\uffa9\024\uffa9" +
    "\025\uffa9\032\uffa9\035\uffa9\036\uff9f\037\uffa9\041\uffa9\042" +
    "\066\043\072\044\070\045\073\046\074\047\065\050\041" +
    "\051\036\057\uff9f\060\uff9f\061\uff9f\001\002\000\030\003" +
    "\uffad\013\uffad\017\uffad\021\uffad\022\uffad\024\uffad\025\uffad" +
    "\032\uffad\035\uffad\037\uffad\041\uffad\001\002\000\012\017" +
    "\uffb7\022\uffb7\025\uffb7\035\uffb7\001\002\000\020\003\045" +
    "\036\uff9f\050\041\051\036\057\uff9f\060\uff9f\061\uff9f\001" +
    "\002\000\022\003\045\036\uff9f\037\052\050\041\051\036" +
    "\057\uff9f\060\uff9f\061\uff9f\001\002\000\012\017\uffbb\022" +
    "\uffbb\025\uffbb\035\uffbb\001\002\000\012\017\uffb6\022\uffb6" +
    "\025\uffb6\035\uffb6\001\002\000\016\017\uffb0\022\uffb0\025" +
    "\uffb0\032\054\035\uffb0\037\uffb0\001\002\000\020\003\045" +
    "\036\uff9f\050\041\051\036\057\uff9f\060\uff9f\061\uff9f\001" +
    "\002\000\014\017\uffb3\022\uffb3\025\uffb3\035\uffb3\037\056" +
    "\001\002\000\012\017\uffb5\022\uffb5\025\uffb5\035\uffb5\001" +
    "\002\000\016\017\uffb0\022\uffb0\025\uffb0\032\054\035\uffb0" +
    "\037\uffb0\001\002\000\014\017\uffb1\022\uffb1\025\uffb1\035" +
    "\uffb1\037\uffb1\001\002\000\004\041\062\001\002\000\100" +
    "\003\uff87\013\uff87\017\uff87\021\uff87\022\uff87\024\uff87\025" +
    "\uff87\031\uff87\032\uff87\033\042\035\uff87\036\uff87\037\uff87" +
    "\040\047\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046" +
    "\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87" +
    "\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\001\002\000" +
    "\074\003\uff88\013\uff88\017\uff88\021\uff88\022\uff88\024\uff88" +
    "\025\uff88\031\uff88\032\uff88\035\uff88\036\uff88\037\uff88\041" +
    "\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88" +
    "\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056" +
    "\uff88\057\uff88\060\uff88\061\uff88\001\002\000\030\003\uffae" +
    "\013\uffae\017\uffae\021\uffae\022\uffae\024\uffae\025\uffae\032" +
    "\uffae\035\uffae\037\uffae\041\uffae\001\002\000\044\003\uffa4" +
    "\013\uffa4\017\uffa4\021\uffa4\022\uffa4\024\uffa4\025\uffa4\032" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\041\uffa4\050\uffa4\051\uffa4" +
    "\057\uffa4\060\uffa4\061\uffa4\001\002\000\044\003\uffa8\013" +
    "\uffa8\017\uffa8\021\uffa8\022\uffa8\024\uffa8\025\uffa8\032\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\041\uffa8\050\uffa8\051\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\001\002\000\044\003\uffab\013\uffab" +
    "\017\uffab\021\uffab\022\uffab\024\uffab\025\uffab\032\uffab\035" +
    "\uffab\036\uff9f\037\uffab\041\uffab\050\041\051\036\057\uff9f" +
    "\060\uff9f\061\uff9f\001\002\000\044\003\uffa5\013\uffa5\017" +
    "\uffa5\021\uffa5\022\uffa5\024\uffa5\025\uffa5\032\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\041\uffa5\050\uffa5\051\uffa5\057\uffa5\060" +
    "\uffa5\061\uffa5\001\002\000\030\003\uffaa\013\uffaa\017\uffaa" +
    "\021\uffaa\022\uffaa\024\uffaa\025\uffaa\032\uffaa\035\uffaa\037" +
    "\uffaa\041\uffaa\001\002\000\044\003\uffa7\013\uffa7\017\uffa7" +
    "\021\uffa7\022\uffa7\024\uffa7\025\uffa7\032\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\041\uffa7\050\uffa7\051\uffa7\057\uffa7\060\uffa7" +
    "\061\uffa7\001\002\000\044\003\uffa6\013\uffa6\017\uffa6\021" +
    "\uffa6\022\uffa6\024\uffa6\025\uffa6\032\uffa6\035\uffa6\036\uffa6" +
    "\037\uffa6\041\uffa6\050\uffa6\051\uffa6\057\uffa6\060\uffa6\061" +
    "\uffa6\001\002\000\044\003\uffa3\013\uffa3\017\uffa3\021\uffa3" +
    "\022\uffa3\024\uffa3\025\uffa3\032\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\041\uffa3\050\uffa3\051\uffa3\057\uffa3\060\uffa3\061\uffa3" +
    "\001\002\000\030\003\uffac\013\uffac\017\uffac\021\uffac\022" +
    "\uffac\024\uffac\025\uffac\032\uffac\035\uffac\037\uffac\041\uffac" +
    "\001\002\000\004\037\077\001\002\000\012\017\uffb2\022" +
    "\uffb2\025\uffb2\035\uffb2\001\002\000\100\003\uff87\013\uff87" +
    "\017\uff87\021\uff87\022\uff87\024\uff87\025\uff87\031\uff87\032" +
    "\uff87\033\042\035\uff87\036\uff87\037\uff87\040\047\041\uff87" +
    "\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050" +
    "\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87" +
    "\057\uff87\060\uff87\061\uff87\001\002\000\074\003\uff89\013" +
    "\uff89\017\uff89\021\uff89\022\uff89\024\uff89\025\uff89\031\uff89" +
    "\032\uff89\035\uff89\036\uff89\037\uff89\041\uff89\042\uff89\043" +
    "\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89" +
    "\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89\060" +
    "\uff89\061\uff89\001\002\000\020\003\045\036\uff9f\050\041" +
    "\051\036\057\uff9f\060\uff9f\061\uff9f\001\002\000\012\017" +
    "\uffaf\022\uffaf\025\uffaf\035\uffaf\001\002\000\072\003\uff8d" +
    "\013\uff8d\017\uff8d\021\uff8d\022\uff8d\024\uff8d\025\uff8d\032" +
    "\uff8d\035\uff8d\036\uff8d\037\uff8d\041\uff8d\042\uff8d\043\uff8d" +
    "\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052" +
    "\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d" +
    "\061\uff8d\001\002\000\012\036\112\057\105\060\111\061" +
    "\110\001\002\000\072\003\uff93\013\uff93\017\uff93\021\uff93" +
    "\022\uff93\024\uff93\025\uff93\032\uff93\035\uff93\036\112\037" +
    "\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93" +
    "\047\uff93\050\uff93\051\uff93\052\135\053\132\054\130\055" +
    "\127\056\uff93\057\105\060\111\061\110\001\002\000\062" +
    "\003\uff9b\013\uff9b\017\uff9b\021\uff9b\022\uff9b\024\uff9b\025" +
    "\uff9b\032\uff9b\035\uff9b\036\112\037\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\122\051" +
    "\117\056\124\057\105\060\111\061\110\001\002\000\072" +
    "\003\uff86\013\uff86\017\uff86\021\uff86\022\uff86\024\uff86\025" +
    "\uff86\032\uff86\035\uff86\036\uff86\037\uff86\041\uff86\042\uff86" +
    "\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051" +
    "\uff86\052\uff86\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86" +
    "\060\uff86\061\uff86\001\002\000\076\003\uff87\013\uff87\017" +
    "\uff87\021\uff87\022\uff87\024\uff87\025\uff87\032\uff87\033\042" +
    "\035\uff87\036\uff87\037\uff87\040\047\041\uff87\042\uff87\043" +
    "\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87" +
    "\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057\uff87\060" +
    "\uff87\061\uff87\001\002\000\020\003\045\036\uff9f\050\041" +
    "\051\036\057\uff9f\060\uff9f\061\uff9f\001\002\000\006\003" +
    "\115\037\114\001\002\000\072\003\uff8b\013\uff8b\017\uff8b" +
    "\021\uff8b\022\uff8b\024\uff8b\025\uff8b\032\uff8b\035\uff8b\036" +
    "\uff8b\037\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b" +
    "\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054" +
    "\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\001\002" +
    "\000\072\003\uff8a\013\uff8a\017\uff8a\021\uff8a\022\uff8a\024" +
    "\uff8a\025\uff8a\032\uff8a\035\uff8a\036\uff8a\037\uff8a\041\uff8a" +
    "\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050" +
    "\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a" +
    "\057\uff8a\060\uff8a\061\uff8a\001\002\000\072\003\uff8e\013" +
    "\uff8e\017\uff8e\021\uff8e\022\uff8e\024\uff8e\025\uff8e\032\uff8e" +
    "\035\uff8e\036\uff8e\037\uff8e\041\uff8e\042\uff8e\043\uff8e\044" +
    "\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e" +
    "\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061" +
    "\uff8e\001\002\000\060\003\uff99\013\uff99\017\uff99\021\uff99" +
    "\022\uff99\024\uff99\025\uff99\032\uff99\035\uff99\036\uff99\037" +
    "\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99" +
    "\047\uff99\050\uff99\051\uff99\057\uff99\060\uff99\061\uff99\001" +
    "\002\000\060\003\uff9d\013\uff9d\017\uff9d\021\uff9d\022\uff9d" +
    "\024\uff9d\025\uff9d\032\uff9d\035\uff9d\036\112\037\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d" +
    "\050\uff9d\051\uff9d\057\105\060\111\061\110\001\002\000" +
    "\060\003\uff9c\013\uff9c\017\uff9c\021\uff9c\022\uff9c\024\uff9c" +
    "\025\uff9c\032\uff9c\035\uff9c\036\uff9c\037\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c" +
    "\051\uff9c\057\uff9c\060\uff9c\061\uff9c\001\002\000\060\003" +
    "\uff9a\013\uff9a\017\uff9a\021\uff9a\022\uff9a\024\uff9a\025\uff9a" +
    "\032\uff9a\035\uff9a\036\uff9a\037\uff9a\041\uff9a\042\uff9a\043" +
    "\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a" +
    "\057\uff9a\060\uff9a\061\uff9a\001\002\000\060\003\uffa2\013" +
    "\uffa2\017\uffa2\021\uffa2\022\uffa2\024\uffa2\025\uffa2\032\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\001\002\000\060\003\uff98\013\uff98\017" +
    "\uff98\021\uff98\022\uff98\024\uff98\025\uff98\032\uff98\035\uff98" +
    "\036\uff98\037\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\046\uff98\047\uff98\050\uff98\051\uff98\057\uff98\060\uff98" +
    "\061\uff98\001\002\000\062\003\uff9b\013\uff9b\017\uff9b\021" +
    "\uff9b\022\uff9b\024\uff9b\025\uff9b\032\uff9b\035\uff9b\036\112" +
    "\037\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046" +
    "\uff9b\047\uff9b\050\122\051\117\056\124\057\105\060\111" +
    "\061\110\001\002\000\060\003\uff9e\013\uff9e\017\uff9e\021" +
    "\uff9e\022\uff9e\024\uff9e\025\uff9e\032\uff9e\035\uff9e\036\uff9e" +
    "\037\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\051\uff9e\057\uff9e\060\uff9e\061\uff9e" +
    "\001\002\000\062\003\uff8f\013\uff8f\017\uff8f\021\uff8f\022" +
    "\uff8f\024\uff8f\025\uff8f\032\uff8f\035\uff8f\036\uff8f\037\uff8f" +
    "\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047" +
    "\uff8f\050\uff8f\051\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f" +
    "\001\002\000\062\003\uff90\013\uff90\017\uff90\021\uff90\022" +
    "\uff90\024\uff90\025\uff90\032\uff90\035\uff90\036\uff90\037\uff90" +
    "\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047" +
    "\uff90\050\uff90\051\uff90\056\uff90\057\uff90\060\uff90\061\uff90" +
    "\001\002\000\062\003\uff97\013\uff97\017\uff97\021\uff97\022" +
    "\uff97\024\uff97\025\uff97\032\uff97\035\uff97\036\uff97\037\uff97" +
    "\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047" +
    "\uff97\050\uff97\051\uff97\056\uff97\057\uff97\060\uff97\061\uff97" +
    "\001\002\000\062\003\uff91\013\uff91\017\uff91\021\uff91\022" +
    "\uff91\024\uff91\025\uff91\032\uff91\035\uff91\036\uff91\037\uff91" +
    "\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047" +
    "\uff91\050\uff91\051\uff91\056\uff91\057\uff91\060\uff91\061\uff91" +
    "\001\002\000\062\003\uff94\013\uff94\017\uff94\021\uff94\022" +
    "\uff94\024\uff94\025\uff94\032\uff94\035\uff94\036\112\037\uff94" +
    "\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047" +
    "\uff94\050\uff94\051\uff94\056\uff94\057\105\060\111\061\110" +
    "\001\002\000\062\003\uff95\013\uff95\017\uff95\021\uff95\022" +
    "\uff95\024\uff95\025\uff95\032\uff95\035\uff95\036\uff95\037\uff95" +
    "\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047" +
    "\uff95\050\uff95\051\uff95\056\uff95\057\uff95\060\uff95\061\uff95" +
    "\001\002\000\062\003\uff92\013\uff92\017\uff92\021\uff92\022" +
    "\uff92\024\uff92\025\uff92\032\uff92\035\uff92\036\uff92\037\uff92" +
    "\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047" +
    "\uff92\050\uff92\051\uff92\056\uff92\057\uff92\060\uff92\061\uff92" +
    "\001\002\000\072\003\uff93\013\uff93\017\uff93\021\uff93\022" +
    "\uff93\024\uff93\025\uff93\032\uff93\035\uff93\036\112\037\uff93" +
    "\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047" +
    "\uff93\050\uff93\051\uff93\052\135\053\132\054\130\055\127" +
    "\056\uff93\057\105\060\111\061\110\001\002\000\062\003" +
    "\uff96\013\uff96\017\uff96\021\uff96\022\uff96\024\uff96\025\uff96" +
    "\032\uff96\035\uff96\036\uff96\037\uff96\041\uff96\042\uff96\043" +
    "\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96" +
    "\056\uff96\057\uff96\060\uff96\061\uff96\001\002\000\072\003" +
    "\uff8c\013\uff8c\017\uff8c\021\uff8c\022\uff8c\024\uff8c\025\uff8c" +
    "\032\uff8c\035\uff8c\036\uff8c\037\uff8c\041\uff8c\042\uff8c\043" +
    "\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c" +
    "\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060" +
    "\uff8c\061\uff8c\001\002\000\012\017\uffba\022\uffba\025\uffba" +
    "\035\uffba\001\002\000\016\010\030\011\025\012\022\020" +
    "\026\023\023\060\032\001\002\000\010\017\uffc8\022\uffc8" +
    "\025\uffc8\001\002\000\012\017\uffc6\022\uffc6\025\uffc6\035" +
    "\142\001\002\000\010\017\uffc7\022\uffc7\025\uffc7\001\002" +
    "\000\004\021\147\001\002\000\016\010\030\011\025\012" +
    "\022\020\026\023\023\060\032\001\002\000\010\017\uffbe" +
    "\022\uffbe\025\151\001\002\000\020\003\045\036\uff9f\050" +
    "\041\051\036\057\uff9f\060\uff9f\061\uff9f\001\002\000\006" +
    "\017\uffbc\022\153\001\002\000\016\010\030\011\025\012" +
    "\022\020\026\023\023\060\032\001\002\000\004\017\155" +
    "\001\002\000\012\017\uffc0\022\uffc0\025\uffc0\035\uffc0\001" +
    "\002\000\004\017\uffbd\001\002\000\004\021\160\001\002" +
    "\000\016\010\030\011\025\012\022\020\026\023\023\060" +
    "\032\001\002\000\010\017\uffbe\022\uffbe\025\151\001\002" +
    "\000\006\017\uffbf\022\uffbf\001\002\000\012\017\uffb8\022" +
    "\uffb8\025\uffb8\035\uffb8\001\002\000\004\024\165\001\002" +
    "\000\016\010\030\011\025\012\022\020\026\023\023\060" +
    "\032\001\002\000\004\017\167\001\002\000\012\017\uffc1" +
    "\022\uffc1\025\uffc1\035\uffc1\001\002\000\012\017\uffb9\022" +
    "\uffb9\025\uffb9\035\uffb9\001\002\000\014\014\ufffa\015\ufffa" +
    "\016\ufffa\017\ufffa\030\ufffa\001\002\000\022\003\045\036" +
    "\uff9f\042\173\050\041\051\036\057\uff9f\060\uff9f\061\uff9f" +
    "\001\002\000\020\003\045\036\uff9f\050\041\051\036\057" +
    "\uff9f\060\uff9f\061\uff9f\001\002\000\004\035\175\001\002" +
    "\000\016\014\ufff6\015\ufff6\016\ufff6\017\ufff6\030\ufff6\060" +
    "\172\001\002\000\014\014\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\030\ufff7\001\002\000\004\035\200\001\002\000\016\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\030\ufff6\060\172\001\002" +
    "\000\014\014\ufff8\015\ufff8\016\ufff8\017\ufff8\030\ufff8\001" +
    "\002\000\012\014\247\015\uffef\016\uffef\017\uffef\001\002" +
    "\000\014\014\ufff1\015\ufff1\016\ufff1\017\ufff1\060\204\001" +
    "\002\000\016\004\206\005\210\006\207\007\211\042\212" +
    "\060\215\001\002\000\012\014\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\001\002\000\010\017\uffd7\035\uffd7\037\uffd7\001\002" +
    "\000\022\003\045\013\243\036\uff9f\050\041\051\036\057" +
    "\uff9f\060\uff9f\061\uff9f\001\002\000\010\017\uffd6\035\uffd6" +
    "\037\uffd6\001\002\000\010\017\uffce\035\uffce\060\225\001" +
    "\002\000\014\004\206\005\210\006\207\007\211\060\215" +
    "\001\002\000\010\017\uffd4\035\uffd4\037\uffd4\001\002\000" +
    "\004\035\217\001\002\000\010\017\uffd8\035\uffd8\037\uffd8" +
    "\001\002\000\010\017\uffd5\035\uffd5\037\uffd5\001\002\000" +
    "\014\014\ufff1\015\ufff1\016\ufff1\017\ufff1\060\204\001\002" +
    "\000\012\014\ufff2\015\ufff2\016\ufff2\017\ufff2\001\002\000" +
    "\004\035\222\001\002\000\014\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\060\204\001\002\000\012\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\001\002\000\004\034\240\001\002\000\006" +
    "\032\234\034\uffc9\001\002\000\006\017\uffd1\035\227\001" +
    "\002\000\010\017\uffce\035\uffce\060\225\001\002\000\004" +
    "\017\231\001\002\000\010\017\uffd3\035\uffd3\037\uffd3\001" +
    "\002\000\006\017\uffd1\035\227\001\002\000\004\017\uffd2" +
    "\001\002\000\004\060\236\001\002\000\004\034\uffcb\001" +
    "\002\000\006\032\234\034\uffc9\001\002\000\004\034\uffca" +
    "\001\002\000\020\004\206\005\210\006\207\007\211\017" +
    "\uffcf\035\uffcf\060\215\001\002\000\006\017\uffd0\035\uffd0" +
    "\001\002\000\004\013\245\001\002\000\014\004\206\005" +
    "\210\006\207\007\211\060\215\001\002\000\010\017\uffcc" +
    "\035\uffcc\037\uffcc\001\002\000\014\004\206\005\210\006" +
    "\207\007\211\060\215\001\002\000\010\017\uffcd\035\uffcd" +
    "\037\uffcd\001\002\000\012\015\uffec\016\uffec\017\uffec\060" +
    "\225\001\002\000\010\015\252\016\uffea\017\uffea\001\002" +
    "\000\004\035\302\001\002\000\004\060\257\001\002\000" +
    "\004\035\255\001\002\000\006\016\ufffb\017\ufffb\001\002" +
    "\000\010\015\252\016\uffea\017\uffea\001\002\000\006\016" +
    "\uffeb\017\uffeb\001\002\000\010\003\262\035\uffe3\036\263" +
    "\001\002\000\004\035\uffe4\001\002\000\004\035\uffe5\001" +
    "\002\000\004\037\301\001\002\000\012\003\267\014\264" +
    "\037\266\060\uffd9\001\002\000\004\060\uffda\001\002\000" +
    "\006\035\274\037\uffdd\001\002\000\004\035\uffe1\001\002" +
    "\000\004\035\uffe0\001\002\000\004\060\225\001\002\000" +
    "\004\034\272\001\002\000\020\004\206\005\210\006\207" +
    "\007\211\035\uffdb\037\uffdb\060\215\001\002\000\006\035" +
    "\uffdc\037\uffdc\001\002\000\006\014\264\060\uffd9\001\002" +
    "\000\004\037\276\001\002\000\004\035\uffe2\001\002\000" +
    "\006\035\274\037\uffdd\001\002\000\004\037\uffde\001\002" +
    "\000\004\035\uffdf\001\002\000\016\014\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\026\013\030\ufff9\001\002\000\004\035\uffe9" +
    "\001\002\000\006\016\306\017\uffe6\001\002\000\004\017" +
    "\310\001\002\000\016\010\030\011\025\012\022\020\026" +
    "\023\023\060\032\001\002\000\004\017\uffe7\001\002\000" +
    "\004\060\311\001\002\000\004\035\uffe8\001\002\000\004" +
    "\034\314\001\002\000\010\015\ufff0\016\ufff0\017\ufff0\001" +
    "\002\000\016\004\206\005\210\006\207\007\211\035\316" +
    "\060\215\001\002\000\004\035\320\001\002\000\012\015" +
    "\uffec\016\uffec\017\uffec\060\225\001\002\000\010\015\uffed" +
    "\016\uffed\017\uffed\001\002\000\012\015\uffec\016\uffec\017" +
    "\uffec\060\225\001\002\000\010\015\uffee\016\uffee\017\uffee" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\013\035\011\001\001\000" +
    "\004\037\201\001\001\000\004\041\170\001\001\000\004" +
    "\034\015\001\001\000\016\017\034\020\026\021\023\022" +
    "\030\023\033\024\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\025" +
    "\045\026\042\027\043\055\167\061\036\001\001\000\010" +
    "\026\163\027\043\061\036\001\001\000\002\001\001\000" +
    "\014\025\045\026\042\027\043\055\162\061\036\001\001" +
    "\000\010\026\145\027\043\061\036\001\001\000\004\052" +
    "\142\001\001\000\014\025\045\026\042\027\043\055\140" +
    "\061\036\001\001\000\002\001\001\000\016\025\045\026" +
    "\042\027\043\033\037\055\050\061\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\106\031\105\032\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\075\001\001\000\012\027\070\057\063\060\066\061\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\060\027\043\061\036\001\001\000\010\026\052\027\043" +
    "\061\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\054\001\001\000\010\026\056\027\043\061\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\074\061\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\100\001" +
    "\001\000\002\001\001\000\010\026\102\027\043\061\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\137\032\103\001\001\000\012\031\133\032\103\064\130" +
    "\065\132\001\001\000\014\030\120\031\105\032\103\062" +
    "\122\063\117\001\001\000\002\001\001\000\004\033\115" +
    "\001\001\000\010\026\112\027\043\061\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\124\031\105\032" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\030\120\031\105\032" +
    "\103\062\125\063\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\135\032\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\031\133\032\103\064\136\065" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\020\143\021\023\022\030\023\033\024" +
    "\032\001\001\000\002\001\001\000\004\052\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\147\020" +
    "\026\021\023\022\030\023\033\024\032\001\001\000\004" +
    "\053\151\001\001\000\010\026\156\027\043\061\036\001" +
    "\001\000\004\054\153\001\001\000\016\017\155\020\026" +
    "\021\023\022\030\023\033\024\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\160\020\026\021\023\022\030\023\033\024" +
    "\032\001\001\000\004\053\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\165\020" +
    "\026\021\023\022\030\023\033\024\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\173\027\043\061\036\001\001\000\010" +
    "\026\176\027\043\061\036\001\001\000\002\001\001\000" +
    "\004\041\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\200\001\001\000\002\001\001\000\004\036" +
    "\247\001\001\000\004\043\204\001\001\000\010\012\213" +
    "\013\212\014\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\241\027\043\061\036\001\001\000\002" +
    "\001\001\000\006\015\225\016\223\001\001\000\010\012" +
    "\220\013\212\014\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\234\001\001\000\004\050\227\001\001\000\006" +
    "\015\231\016\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\236\001\001\000" +
    "\002\001\001\000\010\012\240\013\212\014\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\243\013" +
    "\212\014\215\001\001\000\002\001\001\000\010\012\245" +
    "\013\212\014\215\001\001\000\002\001\001\000\006\016" +
    "\311\042\312\001\001\000\010\005\252\006\250\040\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\252\006\250\040\255" +
    "\001\001\000\002\001\001\000\006\010\257\045\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\264\047\267\001\001\000\002\001\001\000" +
    "\004\046\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\270\001\001\000\002\001\001\000\010\012" +
    "\272\013\212\014\215\001\001\000\002\001\001\000\006" +
    "\011\276\047\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\303\007\302\035\011\001\001\000" +
    "\002\001\001\000\004\044\304\001\001\000\002\001\001" +
    "\000\016\017\306\020\026\021\023\022\030\023\033\024" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\314\013\212\014\215\001\001\000\002\001\001\000\006" +
    "\016\311\042\316\001\001\000\002\001\001\000\006\016" +
    "\311\042\320\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    root = null;

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return getScanner().next_token();

    }


    public moduleBlock root;

    public moduleBlock getAST() {
        return root;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= modules 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		moduleBlock m = (moduleBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    root = m;
    root.convert();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (true) 
        throw new SyntacticException();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // modules ::= MODULE IDENTIFIER SEMICOLON declaration modules_tail END IDENTIFIER DOT 
            {
              moduleBlock RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		declarations d = (declarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		stmts s = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if (!id.equals(id1))
        throw new SemanticException("module name mismatch");
    RESULT = new moduleBlock(id, d, s);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modules",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // modules_tail ::= BEGIN statement_sequence 
            {
              stmts RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmts s = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modules_tail",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // modules_tail ::= 
            {
              stmts RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modules_tail",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= const_declaration type_declaration var_declaration procedure_declarations 
            {
              declarations RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<constDec> c = (ArrayList<constDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<typeDec> t = (ArrayList<typeDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<varDec> v = (ArrayList<varDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<procedureDec> p = (ArrayList<procedureDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new declarations(c, t, v, p);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const_declaration ::= CONST const_dectail 
            {
              ArrayList<constDec> RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<constDec> ct = (ArrayList<constDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ct; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_declaration",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_declaration ::= 
            {
              ArrayList<constDec> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_declaration",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // const_dectail ::= IDENTIFIER EQUAL expression SEMICOLON const_dectail 
            {
              ArrayList<constDec> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<constDec> ct = (ArrayList<constDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (ct == null)
        RESULT = new ArrayList<>();
    else
        RESULT = ct;
    RESULT.add(new constDec(id, e));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_dectail",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // const_dectail ::= IDENTIFIER expression SEMICOLON const_dectail 
            {
              ArrayList<constDec> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<constDec> ct = (ArrayList<constDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (true)
        throw new MissingOperatorException("Missing ':=' for const declaration.");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_dectail",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // const_dectail ::= 
            {
              ArrayList<constDec> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_dectail",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_declaration ::= TYPE type_dectail 
            {
              ArrayList<typeDec> RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<typeDec> tt = (ArrayList<typeDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_declaration ::= 
            {
              ArrayList<typeDec> RESULT =null;
		RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_dectail ::= IDENTIFIER EQUAL type SEMICOLON type_dectail 
            {
              ArrayList<typeDec> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		typeAST t = (typeAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<typeDec> tt = (ArrayList<typeDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (tt == null)
        RESULT = new ArrayList<>();
    else
        RESULT = tt;
    RESULT.add(new typeDec(id, t));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dectail",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type_dectail ::= IDENTIFIER type SEMICOLON type_dectail 
            {
              ArrayList<typeDec> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		typeAST t = (typeAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<typeDec> tt = (ArrayList<typeDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (true)
        throw new MissingOperatorException("Missing '=' for type declaration.");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dectail",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_dectail ::= 
            {
              ArrayList<typeDec> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dectail",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_declaration ::= VAR var_dectail 
            {
              ArrayList<varDec> RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<varDec> vt = (ArrayList<varDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_declaration ::= 
            {
              ArrayList<varDec> RESULT =null;
		RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_dectail ::= identifier_list COLON type SEMICOLON var_dectail 
            {
              ArrayList<varDec> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		identifierList il = (identifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		typeAST t = (typeAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<varDec> vt = (ArrayList<varDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (vt == null)
        RESULT = new ArrayList<>();
    else
        RESULT = vt;
    RESULT.add(new varDec(il, t));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dectail",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_dectail ::= identifier_list COLON SEMICOLON var_dectail 
            {
              ArrayList<varDec> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		identifierList il = (identifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
    if(true)
        throw new SyntacticException("Type Missed for variable declaration.");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dectail",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_dectail ::= 
            {
              ArrayList<varDec> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dectail",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procedure_declarations ::= procedure_declaration SEMICOLON procedure_declarations 
            {
              ArrayList<procedureDec> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		procedureDec p = (procedureDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<procedureDec> pd = (ArrayList<procedureDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (pd == null)
        RESULT = new ArrayList<>();
    else
        RESULT = pd;
    RESULT.add(p);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declarations",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procedure_declarations ::= 
            {
              ArrayList<procedureDec> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declarations",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procedure_declaration ::= procedure_head SEMICOLON procedure_body 
            {
              procedureDec RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		procedureHead h = (procedureHead)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		procedureBody b = (procedureBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (!h.name.equals(b.name))
        throw new SemanticException("procedure name mismatch");
    RESULT = new procedureDec(h, b);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // procedure_body ::= declaration procedure_body_tail END IDENTIFIER 
            {
              procedureBody RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		declarations d = (declarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pbdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pbdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		stmts pbd = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new procedureBody(d, pbd, id);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // procedure_body_tail ::= BEGIN statement_sequence 
            {
              stmts RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmts s = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body_tail",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // procedure_body_tail ::= 
            {
              stmts RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body_tail",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // procedure_head ::= PROCEDURE IDENTIFIER procedure_head_tail 
            {
              procedureHead RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		formalParameters fp = (formalParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new procedureHead(id, fp);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_head",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // procedure_head_tail ::= formal_parameters 
            {
              formalParameters RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		formalParameters fp = (formalParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_head_tail",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // procedure_head_tail ::= 
            {
              formalParameters RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_head_tail",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // formal_parameters ::= LPAREN fp_section fp_section_tail RPAREN 
            {
              formalParameters RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		fpSection fp = (fpSection)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<fpSection> fpt = (ArrayList<fpSection>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if (fpt == null)
        RESULT = new formalParameters();
    else
        RESULT = new formalParameters(fpt);
    RESULT.fpList.add(fp);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // formal_parameters ::= LPAREN RPAREN 
            {
              formalParameters RESULT =null;
		
    RESULT = new formalParameters();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // formal_parameters ::= LPAREN error 
            {
              formalParameters RESULT =null;
		
    if (true) 
        throw new MissingRightParenthesisException();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // formal_parameters ::= error RPAREN 
            {
              formalParameters RESULT =null;
		
    if (true)
        throw new MissingLeftParenthesisException();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // fp_section_tail ::= SEMICOLON fp_section fp_section_tail 
            {
              ArrayList<fpSection> RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		fpSection fp = (fpSection)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<fpSection> fpt = (ArrayList<fpSection>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (fpt == null)
        RESULT = new ArrayList<>();
    else
        RESULT = fpt;
    RESULT.add(fp);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section_tail",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fp_section_tail ::= 
            {
              ArrayList<fpSection> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section_tail",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fp_section ::= var_if identifier_list COLON type 
            {
              fpSection RESULT =null;
		int isvarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int isvarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Boolean isvar = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		identifierList il = (identifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		typeAST t = (typeAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new fpSection(isvar, il, t);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fp_section ::= var_if identifier_list COLON 
            {
              fpSection RESULT =null;
		
    if(true)
        throw new SyntacticException("Type Missed for formal parameters.");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var_if ::= VAR 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_if",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_if ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_if",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type ::= IDENTIFIER 
            {
              typeAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new typeAST(id);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type ::= INTEGER 
            {
              typeAST RESULT =null;
		 RESULT = new typeAST("INTEGER"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= BOOLEAN 
            {
              typeAST RESULT =null;
		 RESULT = new typeAST("BOOLEAN"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= array_type 
            {
              typeAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arrayType a = (arrayType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new typeAST("array", a);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= record_type 
            {
              typeAST RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		recordType r = (recordType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new typeAST("record", r);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // record_type ::= RECORD field_list record_tail END 
            {
              recordType RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		fieldList f = (fieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<fieldList> rt = (ArrayList<fieldList>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if (rt == null)
        RESULT = new recordType();
    else
        RESULT = new recordType(rt);
    RESULT.fieldLists.add(f);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // record_tail ::= SEMICOLON field_list record_tail 
            {
              ArrayList<fieldList> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		fieldList f = (fieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<fieldList> rt = (ArrayList<fieldList>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (rt == null)
        RESULT = new ArrayList<>();
    else
        RESULT = rt;
    RESULT.add(f);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_tail",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // record_tail ::= 
            {
              ArrayList<fieldList> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_tail",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // field_list ::= identifier_list COLON type 
            {
              fieldList RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		identifierList il = (identifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		typeAST t = (typeAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new fieldList(il, t);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // field_list ::= identifier_list COLON 
            {
              fieldList RESULT =null;
		
    if (true)
        throw new SyntacticException("Type Missed in field list.");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // field_list ::= 
            {
              fieldList RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // array_type ::= ARRAY expression OF type 
            {
              arrayType RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		typeAST t = (typeAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new arrayType(e, t);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // array_type ::= ARRAY OF type 
            {
              arrayType RESULT =null;
		
    if (true)
        throw new SyntacticException("Undefined Array Length.");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // identifier_list ::= IDENTIFIER identifier_list_tail 
            {
              identifierList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int iltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> ilt = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (ilt == null)
        RESULT = new identifierList();
    else
        RESULT = new identifierList(ilt);
    RESULT.identifiers.add(id);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // identifier_list_tail ::= COMMA IDENTIFIER identifier_list_tail 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int iltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> ilt = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (ilt == null)
        RESULT = new ArrayList<>();
    else
        RESULT = ilt;
    RESULT.add(id);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list_tail",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // identifier_list_tail ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list_tail",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement_sequence ::= statement statement_sequence_tail 
            {
              stmts RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmt s = (stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<stmt> sst = (ArrayList<stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (sst == null)
        RESULT = new stmts();
    else
        RESULT = new stmts(sst);
    RESULT.statements.add(s);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement_sequence_tail ::= SEMICOLON statement statement_sequence_tail 
            {
              ArrayList<stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmt s = (stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<stmt> sst = (ArrayList<stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (sst == null)
        RESULT = new ArrayList<>();
    else
        RESULT = sst;
    RESULT.add(s);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence_tail",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement_sequence_tail ::= 
            {
              ArrayList<stmt> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence_tail",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= assignment 
            {
              stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		assignmentStmt a = (assignmentStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= procedure_call 
            {
              stmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		callStmt p = (callStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= if_statement 
            {
              stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ifStmt i = (ifStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= while_statement 
            {
              stmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		whileStmt w = (whileStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt(w); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // while_statement ::= WHILE expression DO statement_sequence END 
            {
              whileStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts ss = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = new whileStmt(e, ss);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if_statement ::= IF expression THEN statement_sequence elsif_part else_part END 
            {
              ifStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		stmts ss = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ifStmt el = (ifStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts endp = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = new ifStmt(e, ss, el.elseIfs, endp);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // elsif_part ::= ELSIF expression THEN statement_sequence elsif_part 
            {
              ifStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts ss = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ifStmt el = (ifStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (el == null) 
        RESULT = new ifStmt();
    else
        RESULT = el;
    RESULT.elseIfs.add(new ifStmt(e, ss, true));
    RESULT.isElseIf = true;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_part",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // elsif_part ::= 
            {
              ifStmt RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_part",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // else_part ::= ELSE statement_sequence 
            {
              stmts RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmts ss = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = ss;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // else_part ::= 
            {
              stmts RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // procedure_call ::= IDENTIFIER procedure_call_tail 
            {
              callStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		actualParameters pct = (actualParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new callStmt(id, pct);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // procedure_call ::= WRITE procedure_call_tail 
            {
              callStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		actualParameters pct = (actualParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new callStmt("write", pct);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // procedure_call ::= READ procedure_call_tail 
            {
              callStmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		actualParameters pct = (actualParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new callStmt("read", pct);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // procedure_call ::= WRITELN procedure_call_tail 
            {
              callStmt RESULT =null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object wl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		actualParameters pct = (actualParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new callStmt("writeln", pct);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // procedure_call_tail ::= actual_parameters 
            {
              actualParameters RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		actualParameters ap = (actualParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ap; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call_tail",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // actual_parameters ::= LPAREN RPAREN 
            {
              actualParameters RESULT =null;
		
    RESULT = new actualParameters();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // actual_parameters ::= LPAREN expression actual_parameters_tail RPAREN 
            {
              actualParameters RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<expr> apt = (ArrayList<expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if (apt == null)
        RESULT = new actualParameters();
    else
        RESULT = new actualParameters(apt);
    RESULT.exprs.add(e);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // actual_parameters ::= 
            {
              actualParameters RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // actual_parameters ::= LPAREN expression actual_parameters_tail 
            {
              actualParameters RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<expr> apt = (ArrayList<expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(true) throw new MissingRightParenthesisException(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // actual_parameters ::= expression actual_parameters_tail RPAREN 
            {
              actualParameters RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<expr> apt = (ArrayList<expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (true) throw new MissingLeftParenthesisException(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // actual_parameters_tail ::= COMMA expression actual_parameters_tail 
            {
              ArrayList<expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<expr> apt = (ArrayList<expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (apt == null)
        RESULT = new ArrayList<>();
    else
        RESULT = apt;
    RESULT.add(e);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_tail",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // actual_parameters_tail ::= 
            {
              ArrayList<expr> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_tail",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignment ::= IDENTIFIER selector ASSIGN expression 
            {
              assignmentStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		selectorAST s = (selectorAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new assignmentStmt(id, s, e);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= simple_expression expr_tail 
            {
              expr RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		simpleExpr se = (simpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr et = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (et == null)
        RESULT = new expr(se);
    else
        RESULT = new expr(se, et.op, et.rhs);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= error 
            {
              expr RESULT =null;
		
    if (true)
        throw new MissingLeftParenthesisException();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr_tail ::= tail_op simple_expression 
            {
              expr RESULT =null;
		int topleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int topright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String top = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		simpleExpr se = (simpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new expr();
    RESULT.op = top;
    RESULT.rhs = se;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_tail",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr_tail ::= tail_op 
            {
              expr RESULT =null;
		int topleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int topright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String top = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(true)
        throw new MissingOperandException();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_tail",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr_tail ::= simple_expression 
            {
              expr RESULT =null;
		
    if (true)
        throw new MissingOperatorException();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_tail",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr_tail ::= 
            {
              expr RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_tail",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tail_op ::= EQUAL 
            {
              String RESULT =null;
		 RESULT = "="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tail_op",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tail_op ::= NOT_EQUAL 
            {
              String RESULT =null;
		 RESULT = "#"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tail_op",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tail_op ::= LESS 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tail_op",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tail_op ::= LESS_EQUAL 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tail_op",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tail_op ::= GREATER 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tail_op",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tail_op ::= GREATER_EQUAL 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tail_op",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // simple_expression ::= head_op term simple_expression_tail 
            {
              simpleExpr RESULT =null;
		int hopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String hop = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		termAST t = (termAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int setright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		simpleExpr set = (simpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (set != null) {
        RESULT = set;
        RESULT.lhs = t;
        RESULT.signed = hop;
    }
    else
        RESULT = new simpleExpr(hop, t);


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // head_op ::= ADD 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_op",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // head_op ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_op",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // head_op ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_op",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // simple_expression_tail ::= simple_tail_op term simple_expression_tail 
            {
              simpleExpr RESULT =null;
		int stopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String stop = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		termAST t = (termAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int setright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		simpleExpr set = (simpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (set == null)
        RESULT = new simpleExpr();
    else
        RESULT = set;
    RESULT.op.add(stop);
    RESULT.rhs.add(t);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_tail",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // simple_expression_tail ::= simple_tail_op 
            {
              simpleExpr RESULT =null;
		int stopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stop = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(true)
        throw new MissingOperandException();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_tail",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // simple_expression_tail ::= term 
            {
              simpleExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		termAST t = (termAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (true)
        throw new MissingOperatorException();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_tail",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // simple_expression_tail ::= 
            {
              simpleExpr RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_tail",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // simple_tail_op ::= ADD 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_tail_op",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // simple_tail_op ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_tail_op",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // simple_tail_op ::= OR 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_tail_op",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // term ::= factor term_tail 
            {
              termAST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		factorAST f = (factorAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		termAST tt = (termAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (tt != null) {
        RESULT = tt;
        RESULT.lhs = f;
    }
    else
        RESULT = new termAST(f);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // term_tail ::= term_tail_op factor term_tail 
            {
              termAST RESULT =null;
		int ttopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ttopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ttop = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		factorAST f = (factorAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		termAST tt = (termAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (tt == null)
        RESULT = new termAST();
    else
        RESULT = tt;
    RESULT.op.add(ttop);
    RESULT.rhs.add(f);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_tail",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // term_tail ::= factor 
            {
              termAST RESULT =null;
		
    if (true)
        throw new MissingOperatorException();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_tail",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // term_tail ::= term_tail_op 
            {
              termAST RESULT =null;
		
    if (true)
        throw new MissingOperandException();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_tail",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // term_tail ::= 
            {
              termAST RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_tail",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // term_tail_op ::= MUL 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_tail_op",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // term_tail_op ::= DIV 
            {
              String RESULT =null;
		 RESULT = "div"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_tail_op",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // term_tail_op ::= MOD 
            {
              String RESULT =null;
		 RESULT = "mod"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_tail_op",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // term_tail_op ::= AND 
            {
              String RESULT =null;
		 RESULT = "&"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_tail_op",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // factor ::= IDENTIFIER selector 
            {
              factorAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		selectorAST s = (selectorAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new factorAST(id, s, false);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // factor ::= numbers 
            {
              factorAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		numberAST n = (numberAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new factorAST(n, false);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // factor ::= NOT factor 
            {
              factorAST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		factorAST f = (factorAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = f;
    RESULT.negated = true;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // factor ::= LPAREN expression RPAREN 
            {
              factorAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = new factorAST(e, false);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // factor ::= LPAREN expression error 
            {
              factorAST RESULT =null;
		
    if (true)
        throw new MissingRightParenthesisException();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // selector ::= DOT IDENTIFIER selector 
            {
              selectorAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		selectorAST s = (selectorAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (s == null)
        RESULT = new selectorAST();
    else
        RESULT = s;
    RESULT.types.add(0);
    RESULT.selectors.add(id);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // selector ::= LBRACKET expression RBRACKET selector 
            {
              selectorAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		selectorAST s = (selectorAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (s == null)
        RESULT = new selectorAST();
    else
        RESULT = s;
    RESULT.types.add(1);
    RESULT.selectors.add(e);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // selector ::= 
            {
              selectorAST RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // numbers ::= NUMBER 
            {
              numberAST RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new numberAST(num);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbers",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

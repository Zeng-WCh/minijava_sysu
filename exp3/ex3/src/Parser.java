
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import exceptions.*;
import java.util.ArrayList;
import ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\034\004\000\002\034\002\000\002\004\006" +
    "\000\002\035\004\000\002\035\002\000\002\041\007\000" +
    "\002\041\002\000\002\037\004\000\002\037\002\000\002" +
    "\043\007\000\002\043\002\000\002\036\004\000\002\036" +
    "\002\000\002\042\007\000\002\042\002\000\002\040\005" +
    "\000\002\040\002\000\002\005\005\000\002\007\006\000" +
    "\002\044\004\000\002\044\002\000\002\006\005\000\002" +
    "\045\003\000\002\045\002\000\002\010\006\000\002\010" +
    "\004\000\002\046\005\000\002\046\002\000\002\011\006" +
    "\000\002\047\003\000\002\047\002\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\006\000\002\050\005\000\002\050" +
    "\002\000\002\015\005\000\002\015\002\000\002\014\006" +
    "\000\002\016\004\000\002\051\005\000\002\051\002\000" +
    "\002\017\004\000\002\052\005\000\002\052\002\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\024\007\000\002\023\011\000\002\053\007" +
    "\000\002\053\002\000\002\054\004\000\002\054\002\000" +
    "\002\022\004\000\002\022\004\000\002\022\004\000\002" +
    "\022\004\000\002\055\003\000\002\055\002\000\002\025" +
    "\004\000\002\025\006\000\002\056\005\000\002\056\002" +
    "\000\002\021\006\000\002\026\004\000\002\057\004\000" +
    "\002\057\002\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\027\005\000\002\061\003\000\002\061\003" +
    "\000\002\061\002\000\002\062\005\000\002\062\002\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\030\004\000\002\064\005\000\002\064\002\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\031\004\000\002\031\003\000\002\031\004\000" +
    "\002\031\005\000\002\033\005\000\002\033\006\000\002" +
    "\033\002\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\004\027\006\001\002\000\004\002\274\001" +
    "\002\000\004\002\000\001\002\000\004\060\007\001\002" +
    "\000\004\035\010\001\002\000\016\014\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\026\011\030\ufffa\001\002\000\016\014\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\030\ufff8\060\267\001\002\000" +
    "\014\014\ufff6\015\ufff6\016\ufff6\017\ufff6\030\161\001\002" +
    "\000\006\016\014\017\ufffd\001\002\000\016\010\027\011" +
    "\024\012\021\020\025\023\022\060\031\001\002\000\004" +
    "\017\016\001\002\000\004\060\017\001\002\000\004\033" +
    "\020\001\002\000\004\002\uffff\001\002\000\014\017\uffbf" +
    "\022\uffbf\025\uffbf\035\uffbf\036\040\001\002\000\016\036" +
    "\uffad\050\045\051\046\057\uffad\060\uffad\061\uffad\001\002" +
    "\000\012\017\uffce\022\uffce\025\uffce\035\uffce\001\002\000" +
    "\014\017\uffbf\022\uffbf\025\uffbf\035\uffbf\036\040\001\002" +
    "\000\016\036\uffad\050\045\051\046\057\uffad\060\uffad\061" +
    "\uffad\001\002\000\012\017\uffcf\022\uffcf\025\uffcf\035\131" +
    "\001\002\000\014\017\uffbf\022\uffbf\025\uffbf\035\uffbf\036" +
    "\040\001\002\000\012\017\uffcd\022\uffcd\025\uffcd\035\uffcd" +
    "\001\002\000\022\017\uffbf\022\uffbf\025\uffbf\031\uff9a\033" +
    "\042\035\uffbf\036\040\040\041\001\002\000\012\017\uffcb" +
    "\022\uffcb\025\uffcb\035\uffcb\001\002\000\012\017\uffcc\022" +
    "\uffcc\025\uffcc\035\uffcc\001\002\000\004\017\ufffe\001\002" +
    "\000\004\031\126\001\002\000\012\017\uffc0\022\uffc0\025" +
    "\uffc0\035\uffc0\001\002\000\012\017\uffc4\022\uffc4\025\uffc4" +
    "\035\uffc4\001\002\000\020\036\uffad\037\117\050\045\051" +
    "\046\057\uffad\060\uffad\061\uffad\001\002\000\016\036\uffad" +
    "\050\045\051\046\057\uffad\060\uffad\061\uffad\001\002\000" +
    "\004\060\043\001\002\000\066\013\uff9a\017\uff9a\021\uff9a" +
    "\022\uff9a\024\uff9a\025\uff9a\031\uff9a\032\uff9a\033\042\035" +
    "\uff9a\037\uff9a\040\041\041\uff9a\042\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\056\uff9a\001\002\000\062\013\uff9c" +
    "\017\uff9c\021\uff9c\022\uff9c\024\uff9c\025\uff9c\031\uff9c\032" +
    "\uff9c\035\uff9c\037\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\001\002\000\012\036\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\001\002\000\012\036\uffae\057" +
    "\uffae\060\uffae\061\uffae\001\002\000\042\013\uffb7\017\uffb7" +
    "\021\uffb7\022\uffb7\024\uffb7\025\uffb7\032\uffb7\035\uffb7\037" +
    "\uffb7\041\uffb7\042\113\043\106\044\115\045\114\046\112" +
    "\047\107\001\002\000\012\036\062\057\055\060\061\061" +
    "\060\001\002\000\004\041\052\001\002\000\066\013\uff9a" +
    "\017\uff9a\021\uff9a\022\uff9a\024\uff9a\025\uff9a\031\uff9a\032" +
    "\uff9a\033\042\035\uff9a\037\uff9a\040\041\041\uff9a\042\uff9a" +
    "\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\001\002" +
    "\000\062\013\uff9b\017\uff9b\021\uff9b\022\uff9b\024\uff9b\025" +
    "\uff9b\031\uff9b\032\uff9b\035\uff9b\037\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\001\002" +
    "\000\060\013\uff9f\017\uff9f\021\uff9f\022\uff9f\024\uff9f\025" +
    "\uff9f\032\uff9f\035\uff9f\037\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052" +
    "\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\001\002\000\012" +
    "\036\062\057\055\060\061\061\060\001\002\000\050\013" +
    "\uffab\017\uffab\021\uffab\022\uffab\024\uffab\025\uffab\032\uffab" +
    "\035\uffab\037\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\046\uffab\047\uffab\050\076\051\077\056\101\001\002" +
    "\000\060\013\uffa5\017\uffa5\021\uffa5\022\uffa5\024\uffa5\025" +
    "\uffa5\032\uffa5\035\uffa5\037\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052" +
    "\070\053\071\054\066\055\067\056\uffa5\001\002\000\060" +
    "\013\uff99\017\uff99\021\uff99\022\uff99\024\uff99\025\uff99\032" +
    "\uff99\035\uff99\037\uff99\041\uff99\042\uff99\043\uff99\044\uff99" +
    "\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053" +
    "\uff99\054\uff99\055\uff99\056\uff99\001\002\000\064\013\uff9a" +
    "\017\uff9a\021\uff9a\022\uff9a\024\uff9a\025\uff9a\032\uff9a\033" +
    "\042\035\uff9a\037\uff9a\040\041\041\uff9a\042\uff9a\043\uff9a" +
    "\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052" +
    "\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\001\002\000\016" +
    "\036\uffad\050\045\051\046\057\uffad\060\uffad\061\uffad\001" +
    "\002\000\004\037\064\001\002\000\060\013\uff9d\017\uff9d" +
    "\021\uff9d\022\uff9d\024\uff9d\025\uff9d\032\uff9d\035\uff9d\037" +
    "\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055" +
    "\uff9d\056\uff9d\001\002\000\060\013\uffa0\017\uffa0\021\uffa0" +
    "\022\uffa0\024\uffa0\025\uffa0\032\uffa0\035\uffa0\037\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0" +
    "\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056" +
    "\uffa0\001\002\000\012\036\uffa2\057\uffa2\060\uffa2\061\uffa2" +
    "\001\002\000\012\036\uffa1\057\uffa1\060\uffa1\061\uffa1\001" +
    "\002\000\012\036\uffa4\057\uffa4\060\uffa4\061\uffa4\001\002" +
    "\000\012\036\uffa3\057\uffa3\060\uffa3\061\uffa3\001\002\000" +
    "\012\036\062\057\055\060\061\061\060\001\002\000\050" +
    "\013\uffa7\017\uffa7\021\uffa7\022\uffa7\024\uffa7\025\uffa7\032" +
    "\uffa7\035\uffa7\037\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7" +
    "\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\056\uffa7\001" +
    "\002\000\060\013\uffa5\017\uffa5\021\uffa5\022\uffa5\024\uffa5" +
    "\025\uffa5\032\uffa5\035\uffa5\037\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5" +
    "\052\070\053\071\054\066\055\067\056\uffa5\001\002\000" +
    "\050\013\uffa6\017\uffa6\021\uffa6\022\uffa6\024\uffa6\025\uffa6" +
    "\032\uffa6\035\uffa6\037\uffa6\041\uffa6\042\uffa6\043\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\056\uffa6" +
    "\001\002\000\012\036\uffaa\057\uffaa\060\uffaa\061\uffaa\001" +
    "\002\000\012\036\uffa9\057\uffa9\060\uffa9\061\uffa9\001\002" +
    "\000\012\036\062\057\055\060\061\061\060\001\002\000" +
    "\012\036\uffa8\057\uffa8\060\uffa8\061\uffa8\001\002\000\042" +
    "\013\uffb0\017\uffb0\021\uffb0\022\uffb0\024\uffb0\025\uffb0\032" +
    "\uffb0\035\uffb0\037\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\001\002\000\050\013\uffab\017" +
    "\uffab\021\uffab\022\uffab\024\uffab\025\uffab\032\uffab\035\uffab" +
    "\037\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046" +
    "\uffab\047\uffab\050\076\051\077\056\101\001\002\000\042" +
    "\013\uffac\017\uffac\021\uffac\022\uffac\024\uffac\025\uffac\032" +
    "\uffac\035\uffac\037\uffac\041\uffac\042\uffac\043\uffac\044\uffac" +
    "\045\uffac\046\uffac\047\uffac\001\002\000\060\013\uff9e\017" +
    "\uff9e\021\uff9e\022\uff9e\024\uff9e\025\uff9e\032\uff9e\035\uff9e" +
    "\037\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e" +
    "\055\uff9e\056\uff9e\001\002\000\016\036\uffb5\050\uffb5\051" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\001\002\000\016\036\uffb2" +
    "\050\uffb2\051\uffb2\057\uffb2\060\uffb2\061\uffb2\001\002\000" +
    "\026\013\uffb9\017\uffb9\021\uffb9\022\uffb9\024\uffb9\025\uffb9" +
    "\032\uffb9\035\uffb9\037\uffb9\041\uffb9\001\002\000\016\036" +
    "\uffad\050\045\051\046\057\uffad\060\uffad\061\uffad\001\002" +
    "\000\016\036\uffb1\050\uffb1\051\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\001\002\000\016\036\uffb6\050\uffb6\051\uffb6\057\uffb6" +
    "\060\uffb6\061\uffb6\001\002\000\016\036\uffb4\050\uffb4\051" +
    "\uffb4\057\uffb4\060\uffb4\061\uffb4\001\002\000\016\036\uffb3" +
    "\050\uffb3\051\uffb3\057\uffb3\060\uffb3\061\uffb3\001\002\000" +
    "\026\013\uffb8\017\uffb8\021\uffb8\022\uffb8\024\uffb8\025\uffb8" +
    "\032\uffb8\035\uffb8\037\uffb8\041\uffb8\001\002\000\012\017" +
    "\uffbe\022\uffbe\025\uffbe\035\uffbe\001\002\000\006\032\121" +
    "\037\uffbb\001\002\000\016\036\uffad\050\045\051\046\057" +
    "\uffad\060\uffad\061\uffad\001\002\000\004\037\123\001\002" +
    "\000\012\017\uffbd\022\uffbd\025\uffbd\035\uffbd\001\002\000" +
    "\006\032\121\037\uffbb\001\002\000\004\037\uffbc\001\002" +
    "\000\016\036\uffad\050\045\051\046\057\uffad\060\uffad\061" +
    "\uffad\001\002\000\012\017\uffba\022\uffba\025\uffba\035\uffba" +
    "\001\002\000\012\017\uffc3\022\uffc3\025\uffc3\035\uffc3\001" +
    "\002\000\016\010\027\011\024\012\021\020\025\023\022" +
    "\060\031\001\002\000\010\017\uffd1\022\uffd1\025\uffd1\001" +
    "\002\000\012\017\uffcf\022\uffcf\025\uffcf\035\131\001\002" +
    "\000\010\017\uffd0\022\uffd0\025\uffd0\001\002\000\004\021" +
    "\136\001\002\000\016\010\027\011\024\012\021\020\025" +
    "\023\022\060\031\001\002\000\010\017\uffc7\022\uffc7\025" +
    "\140\001\002\000\016\036\uffad\050\045\051\046\057\uffad" +
    "\060\uffad\061\uffad\001\002\000\006\017\uffc5\022\142\001" +
    "\002\000\016\010\027\011\024\012\021\020\025\023\022" +
    "\060\031\001\002\000\004\017\144\001\002\000\012\017" +
    "\uffc9\022\uffc9\025\uffc9\035\uffc9\001\002\000\004\017\uffc6" +
    "\001\002\000\004\021\147\001\002\000\016\010\027\011" +
    "\024\012\021\020\025\023\022\060\031\001\002\000\010" +
    "\017\uffc7\022\uffc7\025\140\001\002\000\006\017\uffc8\022" +
    "\uffc8\001\002\000\012\017\uffc1\022\uffc1\025\uffc1\035\uffc1" +
    "\001\002\000\004\024\154\001\002\000\016\010\027\011" +
    "\024\012\021\020\025\023\022\060\031\001\002\000\004" +
    "\017\156\001\002\000\012\017\uffca\022\uffca\025\uffca\035" +
    "\uffca\001\002\000\012\017\uffc2\022\uffc2\025\uffc2\035\uffc2" +
    "\001\002\000\012\014\220\015\ufff2\016\ufff2\017\ufff2\001" +
    "\002\000\014\014\ufff4\015\ufff4\016\ufff4\017\ufff4\060\162" +
    "\001\002\000\004\042\164\001\002\000\012\014\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\001\002\000\014\004\166\005\173" +
    "\006\174\007\165\060\170\001\002\000\010\017\uffd6\035" +
    "\uffd6\060\203\001\002\000\010\017\uffde\035\uffde\037\uffde" +
    "\001\002\000\004\035\200\001\002\000\010\017\uffdf\035" +
    "\uffdf\037\uffdf\001\002\000\010\017\uffdc\035\uffdc\037\uffdc" +
    "\001\002\000\010\017\uffdb\035\uffdb\037\uffdb\001\002\000" +
    "\010\017\uffdd\035\uffdd\037\uffdd\001\002\000\016\036\uffad" +
    "\050\045\051\046\057\uffad\060\uffad\061\uffad\001\002\000" +
    "\004\013\176\001\002\000\014\004\166\005\173\006\174" +
    "\007\165\060\170\001\002\000\010\017\uffd5\035\uffd5\037" +
    "\uffd5\001\002\000\014\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\060\162\001\002\000\012\014\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\001\002\000\004\034\216\001\002\000\006\032\212" +
    "\034\uffd2\001\002\000\006\017\uffd8\035\205\001\002\000" +
    "\010\017\uffd6\035\uffd6\060\203\001\002\000\004\017\207" +
    "\001\002\000\010\017\uffda\035\uffda\037\uffda\001\002\000" +
    "\006\017\uffd8\035\205\001\002\000\004\017\uffd9\001\002" +
    "\000\004\060\214\001\002\000\004\034\uffd4\001\002\000" +
    "\006\032\212\034\uffd2\001\002\000\004\034\uffd3\001\002" +
    "\000\014\004\166\005\173\006\174\007\165\060\170\001" +
    "\002\000\006\017\uffd7\035\uffd7\001\002\000\012\015\ufff0" +
    "\016\ufff0\017\ufff0\060\203\001\002\000\010\015\223\016" +
    "\uffee\017\uffee\001\002\000\004\035\250\001\002\000\004" +
    "\060\230\001\002\000\004\035\226\001\002\000\006\016" +
    "\ufffc\017\ufffc\001\002\000\010\015\223\016\uffee\017\uffee" +
    "\001\002\000\006\016\uffef\017\uffef\001\002\000\006\035" +
    "\uffe7\036\233\001\002\000\004\035\uffe8\001\002\000\004" +
    "\035\uffe9\001\002\000\010\014\234\037\235\060\uffe0\001" +
    "\002\000\004\060\uffe1\001\002\000\004\035\uffe5\001\002" +
    "\000\006\035\243\037\uffe3\001\002\000\004\060\203\001" +
    "\002\000\004\034\241\001\002\000\014\004\166\005\173" +
    "\006\174\007\165\060\170\001\002\000\006\035\uffe2\037" +
    "\uffe2\001\002\000\006\014\234\060\uffe0\001\002\000\004" +
    "\037\245\001\002\000\004\035\uffe6\001\002\000\006\035" +
    "\243\037\uffe3\001\002\000\004\037\uffe4\001\002\000\016" +
    "\014\ufffa\015\ufffa\016\ufffa\017\ufffa\026\011\030\ufffa\001" +
    "\002\000\004\035\uffed\001\002\000\006\016\254\017\uffea" +
    "\001\002\000\004\017\256\001\002\000\016\010\027\011" +
    "\024\012\021\020\025\023\022\060\031\001\002\000\004" +
    "\017\uffeb\001\002\000\004\060\257\001\002\000\004\035" +
    "\uffec\001\002\000\004\034\262\001\002\000\010\015\ufff3" +
    "\016\ufff3\017\ufff3\001\002\000\014\004\166\005\173\006" +
    "\174\007\165\060\170\001\002\000\004\035\264\001\002" +
    "\000\012\015\ufff0\016\ufff0\017\ufff0\060\203\001\002\000" +
    "\010\015\ufff1\016\ufff1\017\ufff1\001\002\000\014\014\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\030\ufffb\001\002\000\004\042" +
    "\270\001\002\000\016\036\uffad\050\045\051\046\057\uffad" +
    "\060\uffad\061\uffad\001\002\000\004\035\272\001\002\000" +
    "\016\014\ufff8\015\ufff8\016\ufff8\017\ufff8\030\ufff8\060\267" +
    "\001\002\000\014\014\ufff9\015\ufff9\016\ufff9\017\ufff9\030" +
    "\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\012\035\011\001\001\000\004\041\265\001" +
    "\001\000\004\037\157\001\001\000\004\034\014\001\001" +
    "\000\016\017\033\020\025\021\022\022\027\023\032\024" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\035\055\156\001" +
    "\001\000\010\026\152\027\046\061\047\001\001\000\002" +
    "\001\001\000\006\025\035\055\151\001\001\000\010\026" +
    "\134\027\046\061\047\001\001\000\004\052\131\001\001" +
    "\000\006\025\035\055\127\001\001\000\002\001\001\000" +
    "\010\025\035\033\034\055\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\117\027\046" +
    "\061\047\001\001\000\010\026\050\027\046\061\047\001" +
    "\001\000\002\001\001\000\004\033\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\057" +
    "\107\060\110\001\001\000\010\030\055\031\056\032\053" +
    "\001\001\000\002\001\001\000\004\033\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\104\032\053" +
    "\001\001\000\006\062\101\063\077\001\001\000\006\064" +
    "\072\065\071\001\001\000\002\001\001\000\004\033\064" +
    "\001\001\000\010\026\062\027\046\061\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\073\032\053\001\001\000\002\001\001" +
    "\000\006\064\074\065\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\102\031\056" +
    "\032\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\062\103\063\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\115\061\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\121\001\001" +
    "\000\010\026\123\027\046\061\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\124\001\001\000\002" +
    "\001\001\000\010\026\126\027\046\061\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\132\021\022" +
    "\022\027\023\032\024\031\001\001\000\002\001\001\000" +
    "\004\052\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\136\020\025\021\022\022\027\023\032\024" +
    "\031\001\001\000\004\053\140\001\001\000\010\026\145" +
    "\027\046\061\047\001\001\000\004\054\142\001\001\000" +
    "\016\017\144\020\025\021\022\022\027\023\032\024\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\147\020\025\021\022" +
    "\022\027\023\032\024\031\001\001\000\004\053\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\154\020\025\021\022\022\027\023\032\024" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\220\001\001\000\004\043\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\166" +
    "\013\171\014\170\001\001\000\006\015\203\016\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\026\174\027\046\061\047\001\001\000\002\001\001" +
    "\000\010\012\176\013\171\014\170\001\001\000\002\001" +
    "\001\000\004\043\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\212\001\001\000\004\050\205\001" +
    "\001\000\006\015\207\016\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\214" +
    "\001\001\000\002\001\001\000\010\012\216\013\171\014" +
    "\170\001\001\000\002\001\001\000\006\016\257\042\260" +
    "\001\001\000\010\005\223\006\221\040\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\223\006\221\040\226\001\001\000" +
    "\002\001\001\000\006\010\230\045\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\235\047\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\243" +
    "\001\001\000\004\016\237\001\001\000\002\001\001\000" +
    "\010\012\241\013\171\014\170\001\001\000\002\001\001" +
    "\000\006\011\245\047\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\246\001\001\000\002\001\001" +
    "\000\010\004\251\007\250\035\011\001\001\000\002\001" +
    "\001\000\004\044\252\001\001\000\002\001\001\000\016" +
    "\017\254\020\025\021\022\022\027\023\032\024\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\262\013" +
    "\171\014\170\001\001\000\002\001\001\000\006\016\257" +
    "\042\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\026\270\027\046\061\047\001\001" +
    "\000\002\001\001\000\004\041\272\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    root = null;

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return getScanner().next_token();

    }


    public moduleBlock root;

    public moduleBlock getAST() {
        return root;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= modules 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		moduleBlock m = (moduleBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    root = m;
    root.convert();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // modules ::= MODULE IDENTIFIER SEMICOLON declaration modules_tail END IDENTIFIER DOT 
            {
              moduleBlock RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		declarations d = (declarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		stmts s = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if (!id.equals(id1))
        throw new SemanticException("module name mismatch");
    RESULT = new moduleBlock(id, d, s);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modules",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // modules_tail ::= BEGIN statement_sequence 
            {
              stmts RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmts s = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modules_tail",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // modules_tail ::= 
            {
              stmts RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modules_tail",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= const_declaration type_declaration var_declaration procedure_declarations 
            {
              declarations RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<constDec> c = (ArrayList<constDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<typeDec> t = (ArrayList<typeDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<varDec> v = (ArrayList<varDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<procedureDec> p = (ArrayList<procedureDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new declarations(c, t, v, p);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // const_declaration ::= CONST const_dectail 
            {
              ArrayList<constDec> RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<constDec> ct = (ArrayList<constDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ct; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_declaration",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const_declaration ::= 
            {
              ArrayList<constDec> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_declaration",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_dectail ::= IDENTIFIER EQUAL expression SEMICOLON const_dectail 
            {
              ArrayList<constDec> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<constDec> ct = (ArrayList<constDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (ct == null)
        RESULT = new ArrayList<>();
    else
        RESULT = ct;
    RESULT.add(new constDec(id, e));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_dectail",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // const_dectail ::= 
            {
              ArrayList<constDec> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_dectail",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_declaration ::= TYPE type_dectail 
            {
              ArrayList<typeDec> RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<typeDec> tt = (ArrayList<typeDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_declaration ::= 
            {
              ArrayList<typeDec> RESULT =null;
		RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_dectail ::= IDENTIFIER EQUAL type SEMICOLON type_dectail 
            {
              ArrayList<typeDec> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		typeAST t = (typeAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<typeDec> tt = (ArrayList<typeDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (tt == null)
        RESULT = new ArrayList<>();
    else
        RESULT = tt;
    RESULT.add(new typeDec(id, t));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dectail",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_dectail ::= 
            {
              ArrayList<typeDec> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dectail",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_declaration ::= VAR var_dectail 
            {
              ArrayList<varDec> RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<varDec> vt = (ArrayList<varDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_declaration ::= 
            {
              ArrayList<varDec> RESULT =null;
		RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_dectail ::= identifier_list COLON type SEMICOLON var_dectail 
            {
              ArrayList<varDec> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		identifierList il = (identifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		typeAST t = (typeAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<varDec> vt = (ArrayList<varDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (vt == null)
        RESULT = new ArrayList<>();
    else
        RESULT = vt;
    RESULT.add(new varDec(il, t));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dectail",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_dectail ::= 
            {
              ArrayList<varDec> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dectail",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procedure_declarations ::= procedure_declaration SEMICOLON procedure_declarations 
            {
              ArrayList<procedureDec> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		procedureDec p = (procedureDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<procedureDec> pd = (ArrayList<procedureDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (pd == null)
        RESULT = new ArrayList<>();
    else
        RESULT = pd;
    RESULT.add(p);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declarations",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedure_declarations ::= 
            {
              ArrayList<procedureDec> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declarations",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedure_declaration ::= procedure_head SEMICOLON procedure_body 
            {
              procedureDec RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		procedureHead h = (procedureHead)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		procedureBody b = (procedureBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (!h.name.equals(b.name))
        throw new SemanticException("procedure name mismatch");
    RESULT = new procedureDec(h, b);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedure_body ::= declaration procedure_body_tail END IDENTIFIER 
            {
              procedureBody RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		declarations d = (declarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pbdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pbdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		stmts pbd = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new procedureBody(d, pbd, id);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procedure_body_tail ::= BEGIN statement_sequence 
            {
              stmts RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmts s = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body_tail",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procedure_body_tail ::= 
            {
              stmts RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body_tail",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procedure_head ::= PROCEDURE IDENTIFIER procedure_head_tail 
            {
              procedureHead RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		formalParameters fp = (formalParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new procedureHead(id, fp);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_head",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // procedure_head_tail ::= formal_parameters 
            {
              formalParameters RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		formalParameters fp = (formalParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_head_tail",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // procedure_head_tail ::= 
            {
              formalParameters RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_head_tail",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formal_parameters ::= LPAREN fp_section fp_section_tail RPAREN 
            {
              formalParameters RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		fpSection fp = (fpSection)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<fpSection> fpt = (ArrayList<fpSection>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if (fpt == null)
        RESULT = new formalParameters();
    else
        RESULT = new formalParameters(fpt);
    RESULT.fpList.add(fp);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formal_parameters ::= LPAREN RPAREN 
            {
              formalParameters RESULT =null;
		
    RESULT = new formalParameters();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fp_section_tail ::= SEMICOLON fp_section fp_section_tail 
            {
              ArrayList<fpSection> RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		fpSection fp = (fpSection)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<fpSection> fpt = (ArrayList<fpSection>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (fpt == null)
        RESULT = new ArrayList<>();
    else
        RESULT = fpt;
    RESULT.add(fp);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section_tail",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fp_section_tail ::= 
            {
              ArrayList<fpSection> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section_tail",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // fp_section ::= var_if identifier_list COLON type 
            {
              fpSection RESULT =null;
		int isvarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int isvarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Boolean isvar = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		identifierList il = (identifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		typeAST t = (typeAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new fpSection(isvar, il, t);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_if ::= VAR 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_if",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_if ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_if",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= IDENTIFIER 
            {
              typeAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new typeAST(id);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= INTEGER 
            {
              typeAST RESULT =null;
		 RESULT = new typeAST("INTEGER"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= BOOLEAN 
            {
              typeAST RESULT =null;
		 RESULT = new typeAST("BOOLEAN"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= array_type 
            {
              typeAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arrayType a = (arrayType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new typeAST("array", a);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= record_type 
            {
              typeAST RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		recordType r = (recordType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new typeAST("record", r);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // record_type ::= RECORD field_list record_tail END 
            {
              recordType RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		fieldList f = (fieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<fieldList> rt = (ArrayList<fieldList>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if (rt == null)
        RESULT = new recordType();
    else
        RESULT = new recordType(rt);
    RESULT.fieldLists.add(f);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // record_tail ::= SEMICOLON field_list record_tail 
            {
              ArrayList<fieldList> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		fieldList f = (fieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<fieldList> rt = (ArrayList<fieldList>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (rt == null)
        RESULT = new ArrayList<>();
    else
        RESULT = rt;
    RESULT.add(f);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_tail",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // record_tail ::= 
            {
              ArrayList<fieldList> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_tail",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // field_list ::= identifier_list COLON type 
            {
              fieldList RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		identifierList il = (identifierList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		typeAST t = (typeAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new fieldList(il, t);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // field_list ::= 
            {
              fieldList RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // array_type ::= ARRAY expression OF type 
            {
              arrayType RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		typeAST t = (typeAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new arrayType(e, t);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // identifier_list ::= IDENTIFIER identifier_list_tail 
            {
              identifierList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int iltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> ilt = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (ilt == null)
        RESULT = new identifierList();
    else
        RESULT = new identifierList(ilt);
    RESULT.identifiers.add(id);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // identifier_list_tail ::= COMMA IDENTIFIER identifier_list_tail 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int iltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> ilt = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (ilt == null)
        RESULT = new ArrayList<>();
    else
        RESULT = ilt;
    RESULT.add(id);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list_tail",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // identifier_list_tail ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list_tail",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement_sequence ::= statement statement_sequence_tail 
            {
              stmts RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmt s = (stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<stmt> sst = (ArrayList<stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (sst == null)
        RESULT = new stmts();
    else
        RESULT = new stmts(sst);
    RESULT.statements.add(s);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement_sequence_tail ::= SEMICOLON statement statement_sequence_tail 
            {
              ArrayList<stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmt s = (stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<stmt> sst = (ArrayList<stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (sst == null)
        RESULT = new ArrayList<>();
    else
        RESULT = sst;
    RESULT.add(s);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence_tail",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement_sequence_tail ::= 
            {
              ArrayList<stmt> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence_tail",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= assignment 
            {
              stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		assignmentStmt a = (assignmentStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= procedure_call 
            {
              stmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		callStmt p = (callStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= if_statement 
            {
              stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ifStmt i = (ifStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= while_statement 
            {
              stmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		whileStmt w = (whileStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt(w); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // while_statement ::= WHILE expression DO statement_sequence END 
            {
              whileStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts ss = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = new whileStmt(e, ss);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // if_statement ::= IF expression THEN statement_sequence elsif_part else_part END 
            {
              ifStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		stmts ss = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ifStmt el = (ifStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts endp = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = new ifStmt(e, ss, el.elseIfs, endp);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // elsif_part ::= ELSIF expression THEN statement_sequence elsif_part 
            {
              ifStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts ss = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ifStmt el = (ifStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (el == null) 
        RESULT = new ifStmt();
    else
        RESULT = el;
    RESULT.elseIfs.add(new ifStmt(e, ss, true));
    RESULT.isElseIf = true;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_part",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // elsif_part ::= 
            {
              ifStmt RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_part",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // else_part ::= ELSE statement_sequence 
            {
              stmts RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmts ss = (stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = ss;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // else_part ::= 
            {
              stmts RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // procedure_call ::= IDENTIFIER procedure_call_tail 
            {
              callStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		actualParameters pct = (actualParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new callStmt(id, pct);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // procedure_call ::= WRITE procedure_call_tail 
            {
              callStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		actualParameters pct = (actualParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new callStmt("write", pct);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // procedure_call ::= READ procedure_call_tail 
            {
              callStmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		actualParameters pct = (actualParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new callStmt("read", pct);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // procedure_call ::= WRITELN procedure_call_tail 
            {
              callStmt RESULT =null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object wl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		actualParameters pct = (actualParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new callStmt("writeln", pct);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // procedure_call_tail ::= actual_parameters 
            {
              actualParameters RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		actualParameters ap = (actualParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ap; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call_tail",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // procedure_call_tail ::= 
            {
              actualParameters RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call_tail",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // actual_parameters ::= LPAREN RPAREN 
            {
              actualParameters RESULT =null;
		
    RESULT = new actualParameters();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // actual_parameters ::= LPAREN expression actual_parameters_tail RPAREN 
            {
              actualParameters RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<expr> apt = (ArrayList<expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if (apt == null)
        RESULT = new actualParameters();
    else
        RESULT = new actualParameters(apt);
    RESULT.exprs.add(e);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // actual_parameters_tail ::= COMMA expression actual_parameters_tail 
            {
              ArrayList<expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<expr> apt = (ArrayList<expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (apt == null)
        RESULT = new ArrayList<>();
    else
        RESULT = apt;
    RESULT.add(e);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_tail",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // actual_parameters_tail ::= 
            {
              ArrayList<expr> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_tail",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assignment ::= IDENTIFIER selector ASSIGN expression 
            {
              assignmentStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		selectorAST s = (selectorAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new assignmentStmt(id, s, e);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= simple_expression expr_tail 
            {
              expr RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		simpleExpr se = (simpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr et = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (et == null)
        RESULT = new expr(se);
    else
        RESULT = new expr(se, et.op, et.rhs);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr_tail ::= tail_op simple_expression 
            {
              expr RESULT =null;
		int topleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int topright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String top = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		simpleExpr se = (simpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new expr();
    RESULT.op = top;
    RESULT.rhs = se;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_tail",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_tail ::= 
            {
              expr RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_tail",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tail_op ::= EQUAL 
            {
              String RESULT =null;
		 RESULT = "="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tail_op",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tail_op ::= NOT_EQUAL 
            {
              String RESULT =null;
		 RESULT = "#"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tail_op",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tail_op ::= LESS 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tail_op",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tail_op ::= LESS_EQUAL 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tail_op",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tail_op ::= GREATER 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tail_op",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tail_op ::= GREATER_EQUAL 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tail_op",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // simple_expression ::= head_op term simple_expression_tail 
            {
              simpleExpr RESULT =null;
		int hopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String hop = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		termAST t = (termAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int setright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		simpleExpr set = (simpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (set != null) {
        RESULT = set;
        RESULT.lhs = t;
        RESULT.signed = hop;
    }
    else
        RESULT = new simpleExpr(hop, t);


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // head_op ::= ADD 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_op",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // head_op ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_op",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // head_op ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_op",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // simple_expression_tail ::= simple_tail_op term simple_expression_tail 
            {
              simpleExpr RESULT =null;
		int stopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String stop = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		termAST t = (termAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int setright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		simpleExpr set = (simpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (set == null)
        RESULT = new simpleExpr();
    else
        RESULT = set;
    RESULT.op.add(stop);
    RESULT.rhs.add(t);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_tail",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // simple_expression_tail ::= 
            {
              simpleExpr RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_tail",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // simple_tail_op ::= ADD 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_tail_op",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // simple_tail_op ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_tail_op",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // simple_tail_op ::= OR 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_tail_op",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // term ::= factor term_tail 
            {
              termAST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		factorAST f = (factorAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		termAST tt = (termAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (tt != null) {
        RESULT = tt;
        RESULT.lhs = f;
    }
    else
        RESULT = new termAST(f);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // term_tail ::= term_tail_op factor term_tail 
            {
              termAST RESULT =null;
		int ttopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ttopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ttop = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		factorAST f = (factorAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		termAST tt = (termAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (tt == null)
        RESULT = new termAST();
    else
        RESULT = tt;
    RESULT.op.add(ttop);
    RESULT.rhs.add(f);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_tail",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // term_tail ::= 
            {
              termAST RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_tail",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // term_tail_op ::= MUL 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_tail_op",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // term_tail_op ::= DIV 
            {
              String RESULT =null;
		 RESULT = "div"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_tail_op",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // term_tail_op ::= MOD 
            {
              String RESULT =null;
		 RESULT = "mod"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_tail_op",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // term_tail_op ::= AND 
            {
              String RESULT =null;
		 RESULT = "&"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_tail_op",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // factor ::= IDENTIFIER selector 
            {
              factorAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		selectorAST s = (selectorAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new factorAST(id, s, false);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // factor ::= numbers 
            {
              factorAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		numberAST n = (numberAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new factorAST(n, false);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // factor ::= NOT factor 
            {
              factorAST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		factorAST f = (factorAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = f;
    RESULT.negated = true;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // factor ::= LPAREN expression RPAREN 
            {
              factorAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = new factorAST(e, false);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // selector ::= DOT IDENTIFIER selector 
            {
              selectorAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		selectorAST s = (selectorAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (s == null)
        RESULT = new selectorAST();
    else
        RESULT = s;
    RESULT.types.add(0);
    RESULT.selectors.add(id);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // selector ::= LBRACKET expression RBRACKET selector 
            {
              selectorAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expr e = (expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		selectorAST s = (selectorAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if (s == null)
        RESULT = new selectorAST();
    else
        RESULT = s;
    RESULT.types.add(1);
    RESULT.selectors.add(e);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // selector ::= 
            {
              selectorAST RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // numbers ::= NUMBER 
            {
              numberAST RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new numberAST(num);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbers",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
